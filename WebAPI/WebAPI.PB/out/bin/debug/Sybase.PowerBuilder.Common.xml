<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sybase.PowerBuilder.Common</name>
    </assembly>
    <members>
        <member name="T:Sybase.PowerBuilder.PBSystemFunctions">
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
            <summary>
            Summary description for PBSystemFunctions.
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Char(Sybase.PowerBuilder.PBAny)">
            <summary>
            Extracts the first Unicode character of a string or converts an integer to a char.
            </summary>
            <param name="v">A string that begins with the character you want, an integer you want to convert to a character, or a blob in which the first value is a string or integer. The rest of the contents of the string or blob is ignored. N can also be an Any variable containing a string, integer, or blob. </param>
            <returns>Char. Returns the first Unicode character of n. If n is null, Char returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.CharA(Sybase.PowerBuilder.PBAny)">
            <summary>
            Extracts the first ASCII character of a string or converts an integer to a char.
            </summary>
            <param name="v">A string that begins with the character you want, an integer you want to convert to a character, or a blob in which the first value is a string or integer. The rest of the contents of the string or blob is ignored. N can also be an Any variable containing a string, integer, or blob. </param>
            <returns>Char. Returns the first character of n. If n is null, CharA returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Fill(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong)">
            <summary>
            Builds a string of the specified length by repeating the specified characters until the result string is long enough.
            </summary>
            <param name="f">A string whose value will be repeated to fill the return string</param>
            <param name="n">A long whose value is the length of the string you want returned</param>
            <returns>String. Returns a string n characters long filled with the characters in the argument chars. If the argument chars has more than n characters, the first n characters of chars are used to fill the return string. If the argument chars has fewer than n characters, the characters in chars are repeated until the return string has n characters. If any argument's value is null, Fill returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.FillA(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong)">
            <summary>
            Builds a string of the specified length in bytes by repeating the specified characters until the result string is long enough.
            </summary>
            <param name="f">The string whose value is repeated to fill the return string</param>
            <param name="n">A long specifying the number of bytes in the return string</param>
            <returns>String. Returns a string n bytes long filled with the characters in the argument chars. If the argument chars has more than n bytes, the first n bytes of chars are used to fill the return string. If the argument chars has fewer than n bytes, the characters in chars are repeated until the return string has n bytes. If any argument's value is null, FillA returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.FillW(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong)">
            <summary>
            Builds a string of the specified length by repeating the specified characters until the result string is long enough. This function is obsolete. It has the same behavior as Fill in SBCS and DBCS environments.
            </summary>
            <param name="f">The string whose value is repeated to fill the return string</param>
            <param name="n">A long specifying the number of bytes in the return string</param>
            <returns>String. Returns a string n bytes long filled with the characters in the argument chars. If the argument chars has more than n bytes, the first n bytes of chars are used to fill the return string. If the argument chars has fewer than n bytes, the characters in chars are repeated until the return string has n bytes. If any argument's value is null, FillA returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.LastPos(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBString)">
            <summary>
            Finds the last position of a target string in a source string.
            </summary>
            <param name="s1">The string in which you want to find string2.</param>
            <param name="s2">The string you want to find in string1.</param>
            <returns>Long. Returns a long whose value is the starting position of the last occurrence of string2 in string1 within the characters specified in searchlength. If string2 is not found in string1 or if searchlength is 0, LastPos returns 0. If any argument's value is null, LastPos returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.LastPos(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong)">
            <summary>
            Finds the last position of a target string in a source string.
            </summary>
            <param name="s1">The string in which you want to find string2.</param>
            <param name="s2">The string you want to find in string1.</param>
            <param name="s">A long that limits the search to the leftmost searchlength characters of the source string string1. The default is the entire string.</param>
            <returns>Long. Returns a long whose value is the starting position of the last occurrence of string2 in string1 within the characters specified in searchlength. If string2 is not found in string1 or if searchlength is 0, LastPos returns 0. If any argument's value is null, LastPos returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Left(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong)">
            <summary>
            Obtains a specified number of characters from the beginning of a string.
            </summary>
            <param name="v">The string you want to search</param>
            <param name="n">A long specifying the number of characters you want to return</param>
            <returns>String. Returns the leftmost n characters in string if it succeeds and the empty string ("") if an error occurs. If any argument's value is null, Left returns null. If n is greater than or equal to the length of the string, Left returns the entire string. It does not add spaces to make the return value's length equal to n.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.LeftA(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong)">
            <summary>
            Temporarily converts a string from Unicode to DBCS based on the current locale, then returns the specified number of bytes from the string.
            </summary>
            <param name="v">The string you want to search from left to right</param>
            <param name="n">A long specifying the number of bytes of the characters in the return string</param>
            <returns>String. Returns the characters for the leftmost n bytes in the source string if it succeeds and the empty string ("") if an error occurs. If any argument's value is null, LeftA returns null. If n is greater than or equal to the length of the string, LeftA returns the entire string. It does not add spaces to make the return value's length equal to n.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.LeftW(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong)">
            <summary>
            Obtains a specified number of characters from the beginning of a string. This function is obsolete. It has the same behavior as Left in all environments.
            </summary>
            <param name="v">The string you want to search from left to right</param>
            <param name="n">A long specifying the number of bytes of the characters in the return string</param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.LeftTrim(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBBoolean)">
            <summary>
            Removes spaces from the beginning of a string.
            </summary>
            <param name="s">The string you want returned with leading spaces deleted</param>
            <param name="RemoveAllTypeSpaces">A boolean indicating that all types of spaces should be deleted</param>
            <returns>String. Returns a copy of string with leading spaces deleted if it succeeds and the empty string ("") if an error occurs. If string is null, LeftTrim returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.LeftTrim(Sybase.PowerBuilder.PBString)">
            <summary>
            Removes spaces from the beginning of a string.
            </summary>
            <param name="s">The string you want returned with leading spaces deleted</param>
            <returns>String. Returns a copy of string with leading spaces deleted if it succeeds and the empty string ("") if an error occurs. If string is null, LeftTrim returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.LeftTrimW(Sybase.PowerBuilder.PBString)">
            <summary>
            Removes spaces from the beginning of a string. This function is obsolete. It has the same behavior as LeftTrim in all environments.
            </summary>
            <param name="s">The string you want returned with leading spaces deleted</param>
            <returns>String. Returns a copy of string with leading spaces deleted if it succeeds and the empty string ("") if an error occurs. If string is null, LeftTrim returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Len(Sybase.PowerBuilder.PBString)">
            <summary>
            Reports the length of a string or a blob. 
            </summary>
            <param name="s">The string or blob for which you want the length in number of characters or in number of bytes</param>
            <returns>Long. Returns a long whose value is the length of stringorblob if it succeeds and -1 if an error occurs. If stringorblob is null, Len returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.LenA(Sybase.PowerBuilder.PBString)">
            <summary>
            When the argument is a string, temporarily converts the string from Unicode to DBCS based on the current locale, then calculates its length in bytes. When the argument is a blob, no conversion takes place.
            </summary>
            <param name="s">The string or blob for which you want the length in number of bytes</param>
            <returns>Long. Returns a long whose value is the length of stringorblob if it succeeds and -1 if an error occurs. If stringorblob is null, Len returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.LenA(Sybase.PowerBuilder.PBBlob)">
            <summary>
            When the argument is a string, temporarily converts the string from Unicode to DBCS based on the current locale, then calculates its length in bytes. When the argument is a blob, no conversion takes place.
            </summary>
            <param name="b">The string or blob for which you want the length in number of bytes</param>
            <returns>Long. Returns a long whose value is the length of stringorblob if it succeeds and -1 if an error occurs. If stringorblob is null, Len returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.LenW(Sybase.PowerBuilder.PBString)">
            <summary>
            Reports the length of a string or a blob. This function is obsolete. It has the same behavior as Len in all environments.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Lower(Sybase.PowerBuilder.PBString)">
            <summary>
            Converts all the characters in a string to lowercase.
            </summary>
            <param name="v">The string you want to convert to lowercase letters</param>
            <returns>String. Returns string with uppercase letters changed to lowercase if it succeeds and the empty string ("") if an error occurs. If string is null, Lower returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Match(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBString)">
            <summary>
            Determines whether a string's value contains a particular pattern of characters.
            </summary>
            <param name="SourceText">The string in which you want to look for a pattern of characters</param>
            <param name="PatternToMatch">A string whose value is the text pattern</param>
            <returns>Boolean. Returns true if string matches textpattern and false if it does not. Match also returns false if either argument has not been assigned a value or the pattern is invalid. If any argument's value is null, Match returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.MatchW(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBString)">
            <summary>
            Determines whether a string's value contains a particular pattern of characters. This function is obsolete. It has the same behavior as Match in all environments.
            </summary>
            <param name="SourceString"></param>
            <param name="PatternToMatch"></param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Mid(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong)">
            <summary>
            Obtains a specified number of characters from a specified position in a string.
            </summary>
            <param name="s">The string from which you want characters returned.</param>
            <param name="x">A long specifying the position of the first character you want returned. (The position of the first character of the string is 1).</param>
            <returns>String. Returns characters specified in length of string starting at character  start. If start is greater than the number of characters in string, the Mid function returns the empty string (""). If length is greater than the number of characters remaining after the start character, Mid returns the remaining characters. The return string is not filled with spaces to make it the specified length. If any argument's value is null, Mid returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.MidW(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong)">
            <summary>
            Obtains a specified number of characters from a specified position in a string. This function is obsolete. It has the same behavior as Mid.
            </summary>
            <param name="s"></param>
            <param name="StartIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.MidA(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong)">
            <summary>
            Temporarily converts a string to DBCS, then returns the specified number of bytes from the string, starting from a specified position. 
            </summary>
            <param name="s">The string you want to search. </param>
            <param name="StartIndex">A long specifying the position of the first byte you want returned. (The position of the first byte of the string is 1.)</param>
            <returns>String. Returns characters specified by the number of bytes searched in a source string, beginning at the byte specified in the start argument. If start is greater than the number of bytes in string, the MidA function returns an empty string (""). If length is greater than the number of bytes remaining after the start character, MidA returns the remaining bytes. The return string is not filled with spaces to make it the specified length. If any argument's value is null, MidA returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Mid(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBLong)">
            <summary>
            Obtains a specified number of characters from a specified position in a string.
            </summary>
            <param name="s">The string from which you want characters returned.</param>
            <param name="x">A long specifying the position of the first character you want returned. (The position of the first character of the string is 1).</param>
            <param name="y">A long whose value is the number of characters you want returned. If you do not enter length or if length is greater than the number of characters to the right of start, Mid returns the remaining characters in the string.</param>
            <returns>String. Returns characters specified in length of string starting at character  start. If start is greater than the number of characters in string, the Mid function returns the empty string (""). If length is greater than the number of characters remaining after the start character, Mid returns the remaining characters. The return string is not filled with spaces to make it the specified length. If any argument's value is null, Mid returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.MidW(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBLong)">
            <summary>
            Obtains a specified number of characters from a specified position in a string. This function is obsolete. It has the same behavior as Mid.
            </summary>
            <param name="SourceString"></param>
            <param name="StartIndex"></param>
            <param name="NoOfChars"></param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.MidA(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBLong)">
            <summary>
            emporarily converts a string to DBCS, then returns the specified number of bytes from the string, starting from a specified position. 
            </summary>
            <param name="SourceString">The string you want to search. </param>
            <param name="StartIndex">A long specifying the position of the first byte you want returned. (The position of the first byte of the string is 1.)</param>
            <param name="NoOfChars">A long whose value is the number of bytes you want returned. If you do not enter length or if length is greater than the number of bytes to the right of start, MidA returns the remaining bytes in the string.</param>
            <returns>String. Returns characters specified by the number of bytes searched in a source string, beginning at the byte specified in the start argument. If start is greater than the number of bytes in string, the MidA function returns an empty string (""). If length is greater than the number of bytes remaining after the start character, MidA returns the remaining bytes. The return string is not filled with spaces to make it the specified length. If any argument's value is null, MidA returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Pos(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBString)">
            <summary>
            Finds one string within another string.
            </summary>
            <param name="s1">The string in which you want to find string2.</param>
            <param name="s2">The string you want to find in string1.</param>
            <returns>Long. Returns a long whose value is the starting position of the first occurrence of string2 in string1 after the position specified in start. If string2 is not found in string1 or if start is not within string1, Pos returns 0. If any argument's value is null, Pos returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PosA(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBString)">
            <summary>
            Temporarily converts a string from Unicode to DBCS based on the current locale, then finds one string within another string.
            </summary>
            <param name="s1">The string in which you want to find string2.</param>
            <param name="s2">The string you want to find in string1.</param>
            <returns>Long. Returns a long whose value is the starting position of the first occurrence of string2 in string1 after the position in bytes specified by start. If string2 is not found in string1 or if start is not within string1, PosA returns 0. If any argument's value is null, PosA returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PosA(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong)">
            <summary>
            Temporarily converts a string from Unicode to DBCS based on the current locale, then finds one string within another string.
            </summary>
            <param name="s1">The string in which you want to find string2.</param>
            <param name="s2">The string you want to find in string1.</param>
            <param name="Index">A long indicating the position in string1 where the search will begin. The position is indicated by the number of bytes you specify for this argument. The default is 1. </param>
            <returns>Long. Returns a long whose value is the starting position of the first occurrence of string2 in string1 after the position in bytes specified by start. If string2 is not found in string1 or if start is not within string1, PosA returns 0. If any argument's value is null, PosA returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PosW(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBString)">
            <summary>
            Finds one string within another string. This function is obsolete. It has the same behavior as Pos in all environments.
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Pos(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong)">
            <summary>
            Finds one string within another string.
            </summary>
            <param name="s1">The string in which you want to find string2.</param>
            <param name="s2">The string you want to find in string1.</param>
            <param name="Index">A long indicating where the search will begin in string1. The default is 1.</param>
            <returns>Long. Returns a long whose value is the starting position of the first occurrence of string2 in string1 after the position specified in start. If string2 is not found in string1 or if start is not within string1, Pos returns 0. If any argument's value is null, Pos returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PosW(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong)">
            <summary>
            Finds one string within another string. This function is obsolete. It has the same behavior as Pos in all environments.
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <param name="Index"></param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Replace(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBString)">
            <summary>
            Replaces a portion of one string with another.
            </summary>
            <param name="OriginalString">The string in which you want to replace characters with string2.</param>
            <param name="StartIndex">A long whose value is the number of the first character you want replaced. (The first character in the string is number 1.)</param>
            <param name="NoOfChars">A long whose value is the number of characters you want to replace.</param>
            <param name="StringToReplace">The string that will replace characters in string1. The number of characters in string2 can be greater than, equal to, or less than the number of characters you are replacing.</param>
            <returns>String. Returns the string with the characters replaced if it succeeds and the empty string if it fails. If any argument's value is null, Replace returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.ReplaceW(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBString)">
            <summary>
            Replaces a portion of one string with another. This function is obsolete. It has the same behavior as Replace in all environments.
            </summary>
            <param name="OriginalString"></param>
            <param name="StartIndex"></param>
            <param name="NoOfChars"></param>
            <param name="StringToReplace"></param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.ReplaceA(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBString)">
            <summary>
            Temporarily converts a string to DBCS based on the current locale, then replaces a portion of one string with another.
            </summary>
            <param name="OriginalString">The string containing characters you want to replace.</param>
            <param name="StartIndex">A long whose value is the position in bytes of the first character you want to replace in string1. </param>
            <param name="NoOfChars">A long whose value is the number of bytes you want to replace in string1.</param>
            <param name="StringToReplace">The string that will replace characters in string1. The number of characters in string2 can be greater than, equal to, or less than the number of characters you are replacing.</param>
            <returns>String. Returns the string with the characters replaced if it succeeds and the empty string if it fails. If any argument's value is null, ReplaceA returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Reverse(Sybase.PowerBuilder.PBString)">
            <summary>
            Reverses the order or characters in a string.
            </summary>
            <param name="s">A string whose characters you want to reorder so that the last character is first and the first character is last</param>
            <returns>String. Returns a string with the characters of string in reversed order. Returns the empty string if it fails.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.ReverseW(Sybase.PowerBuilder.PBString)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Right(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong)">
            <summary>
            Obtains a specified number of characters from the end of a string.
            </summary>
            <param name="s">The string from which you want characters returned</param>
            <param name="NoOfChars">A long whose value is the number of characters you want returned from the right end of string</param>
            <returns>String. Returns the rightmost n characters in string if it succeeds and the empty string ("") if an error occurs. If any argument's value is null, Right returns null. If n is greater than or equal to the length of the string, Right returns the entire string. It does not add spaces to make the return value's length equal to n.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.RightW(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong)">
            <summary>
            Obtains a specified number of characters from the end of a string. This function is obsolete. It has the same behavior as Right in all environments.
            </summary>
            <param name="s"></param>
            <param name="NoOfChars"></param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.RightA(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBLong)">
            <summary>
            Temporarily converts a string from Unicode to DBCS based on the current locale, then returns the specified number of bytes from the end of the string.
            </summary>
            <param name="s">The string you want to search</param>
            <param name="NoOfChars">A long whose value is the number of bytes you want returned from the right end of string</param>
            <returns>String. Returns the rightmost n characters in string if it succeeds and the empty string ("") if an error occurs. If any argument's value is null, RightA returns null. If n is greater than or equal to the length of the string, RightA returns the entire string. It does not add spaces to make the return value's length equal to n.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.RightTrim(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBBoolean)">
            <summary>
            Removes spaces from the end of a string.
            </summary>
            <param name="s">The string you want returned with trailing blanks deleted</param>
            <param name="RemoveAllTypeSpaces">A boolean indicating that all types of spaces should be deleted</param>
            <returns>String. Returns a copy of string with trailing blanks deleted if it succeeds and the empty string ("") if an error occurs. If any argument's value is null, RightTrim returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.RightTrim(Sybase.PowerBuilder.PBString)">
            <summary>
            Removes spaces from the end of a string.
            </summary>
            <param name="s">The string you want returned with trailing blanks deleted</param>
            <returns>String. Returns a copy of string with trailing blanks deleted if it succeeds and the empty string ("") if an error occurs.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.RightTrimW(Sybase.PowerBuilder.PBString)">
            <summary>
            Removes spaces from the end of a string. This function is obsolete. It has the same behavior as RightTrim in all environments.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Space(Sybase.PowerBuilder.PBLong)">
            <summary>
            Builds a string of the specified length whose value consists of spaces.
            </summary>
            <param name="n">A long whose value is the length of the string you want filled with spaces. The maximum value is 2,147,483,647, which is the maximum size for strings.</param>
            <returns>String. Returns a string filled with n spaces if it succeeds and the empty string ("") if an error occurs. If n is null, Space returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.WordCap(Sybase.PowerBuilder.PBString)">
            <summary>
            Capitalizes the first letter of each word in a passed script. It sets the remaining letters in each word to lowercase.
            </summary>
            <param name="s">String to be modified</param>
            <returns>String. If it succeeds, returns the text passed in the function argument with the first letter of each word in uppercase and the remaining letters in lowercase. Returns null if an error occurs.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Trim(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBBoolean)">
            <summary>
            Removes leading and trailing spaces from a string.
            </summary>
            <param name="s">The string you want returned with leading and trailing spaces deleted</param>
            <param name="RemoveAllTypeSpaces">A boolean indicating that all types of spaces should be deleted</param>
            <returns>String. Returns a copy of string with all leading and trailing spaces deleted if it succeeds and the empty string ("") if an error occurs. If string is null, Trim returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Trim(Sybase.PowerBuilder.PBString)">
            <summary>
            Removes leading and trailing spaces from a string.
            </summary>
            <param name="s">The string you want returned with leading and trailing spaces deleted</param>
            <returns>String. Returns a copy of string with all leading and trailing spaces deleted if it succeeds and the empty string ("") if an error occurs. If string is null, Trim returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.TrimW(Sybase.PowerBuilder.PBString)">
            <summary>
            Removes leading and trailing spaces from a string. This function is obsolete. It has the same behavior as Trim in all environments.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.TrimA(Sybase.PowerBuilder.PBString)">
            <summary>
            Removes leading and trailing spaces from a string.
            </summary>
            <param name="s">The string you want returned with leading and trailing spaces deleted</param>
            <returns>String. Returns a copy of string with all leading and trailing spaces deleted if it succeeds and the empty string ("") if an error occurs. If string is null, Trim returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Upper(Sybase.PowerBuilder.PBString)">
            <summary>
            Converts all the characters in a string to uppercase.
            </summary>
            <param name="s">The string you want to convert to uppercase letters</param>
            <returns>String. Returns string with lowercase letters changed to uppercase if it succeeds and the empty string ("") if an error occurs. If string is null, Upper returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.IsAllArabic(Sybase.PowerBuilder.PBString)">
            <summary>
            Tests whether a particular string is composed entirely of Arabic characters. 
            </summary>
            <param name="s">A string whose value you want to test to find out if it is composed entirely of Arabic characters</param>
            <returns>Boolean. Returns true if string is composed entirely of Arabic characters and false if it is not. The presence of numbers, spaces, and punctuation marks will also result in a return value of false. </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.IsAllHebrew(Sybase.PowerBuilder.PBString)">
            <summary>
            Tests whether a particular string is composed entirely of Hebrew characters. 
            </summary>
            <param name="s">A string whose value you want to test to find out if it is composed entirely of Hebrew characters</param>
            <returns>Boolean. Returns true if string is composed entirely of Hebrew characters and false if it is not. The presence of numbers, spaces, and punctuation marks will also result in a return value of false.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.IsAnyArabic(Sybase.PowerBuilder.PBString)">
            <summary>
            Tests whether a particular string contains at least one Arabic character.
            </summary>
            <param name="s">A string whose value you want to test to find out if it contains at least one Arabic character</param>
            <returns>Boolean. Returns true if string contains at least one Arabic character and false if it does not.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.IsAnyHebrew(Sybase.PowerBuilder.PBString)">
            <summary>
            Tests whether a particular string contains at least one Hebrew character.
            </summary>
            <param name="s">A string whose value you want to test to find out if it contains at least one Hebrew character</param>
            <returns>Boolean. Returns true if string contains at least one Hebrew character and false if it does not.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.IsArabic(Sybase.PowerBuilder.PBChar)">
            <summary>
            Tests whether a particular character is an Arabic character. For a string, IsArabic tests only the first character on the left.
            </summary>
            <param name="c">A character or string whose value you want to test to find out if it is an Arabic character. </param>
            <returns>Boolean. Returns true if character is an Arabic character and false if it is not.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.IsArabicAndNumbers(Sybase.PowerBuilder.PBString)">
            <summary>
            Tests whether a particular string is composed entirely of Arabic characters or numbers.
            </summary>
            <param name="s">A string whose value you want to test to find out if it is composed entirely of Arabic characters or numbers</param>
            <returns>Boolean. Returns true if string is composed entirely of Arabic characters or numbers and false if it is not.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.IsHebrew(Sybase.PowerBuilder.PBChar)">
            <summary>
            Tests whether a particular character is a Hebrew character. For a string, IsHebrew tests only the first character on the left.
            </summary>
            <param name="c">A character or string whose value you want to test to find out if it is an Hebrew character</param>
            <returns>Boolean. Returns true if character is an Hebrew character and false if it is not.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.IsHebrewAndNumbers(Sybase.PowerBuilder.PBString)">
            <summary>
            Tests whether a particular string is composed entirely of Hebrew characters and numbers.
            </summary>
            <param name="s">A string whose value you want to test to find out if it is composed entirely of Hebrew characters and numbers</param>
            <returns>Boolean. Returns true if string is composed entirely of Hebrew characters and numbers and false if it is not.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.ToAnsi(Sybase.PowerBuilder.PBString)">
            <summary>
            Converts a character string to an ANSI blob.
            </summary>
            <param name="s">A character string you want to convert to an ANSI blob </param>
            <returns>Blob. Returns an ANSI blob if it succeeds and an empty blob if it fails.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.FromAnsi(Sybase.PowerBuilder.PBBlob)">
            <summary>
            Converts a blob containing an ANSI character string to a Unicode string.
            </summary>
            <param name="b">A blob containing an ANSI character string you want to convert to a Unicode string</param>
            <returns>String. Returns a character string if it succeeds and an empty string if it fails.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.ToUnicode(Sybase.PowerBuilder.PBString)">
            <summary>
            Converts a character string to a Unicode blob.
            </summary>
            <param name="s">A character string you want to convert to a Unicode blob</param>
            <returns>Blob. Returns a Unicode blob if it succeeds and an empty blob if it fails.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.FromUnicode(Sybase.PowerBuilder.PBBlob)">
            <summary>
            Converts a blob containing a Unicode character string to a string in the file format of the current version of PowerBuilder.
            </summary>
            <param name="b">A blob containing a Unicode character string you want to convert to a string in the file format of the current version of PowerBuilder</param>
            <returns>String. Returns a character string if it succeeds and an empty string if it fails.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions._GetEnvironment``1(``0@)">
            <summary>
            Return value 
            Integer. Returns 1 if it succeeds and -1 if an error occurs. 
            If environmentinfo is null, GetEnvironment returns null.
            
            This function will be called from Sybase.PowerBuilder.Web.PBSystemFunctions.GetEnvironment()
            and Sybase.PowerBuilder.Win.PBSystemFunctions.GetEnvironment(). It does all the things except 
            screen resolution setting and 
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.GetConfigSetting(Sybase.PowerBuilder.PBString)">
             <summary>
             Returns the value of a global configuration property.
             </summary>
             <param name="key">A string for the name of a global property in the appSettings section of the Web.Config file.</param>
             <returns>String. Returns the value of the global property passed in the key parameter.
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Asc(Sybase.PowerBuilder.PBString)">
            <summary>
            Converts the first character of a string to its Unicode code point. A code point is the numerical integer value given to a Unicode character.
            </summary>
            <param name="s">The string for which you want the code point value of the first character</param>
            <returns>Unsigned Integer. Returns the code point value of the first character in string. If string is null, Asc returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.AscA(Sybase.PowerBuilder.PBString)">
            <summary>
            Converts the first character of a string to its ASCII integer value.
            </summary>
            <param name="s">The string for which you want the ASCII value of the first character</param>
            <returns>Integer. Returns the ASCII value of the first character in string. If string is null, AscA returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Dec(Sybase.PowerBuilder.PBAny)">
            <summary>
            Converts a string to a decimal number or obtains a decimal value stored in a blob.
            </summary>
            <param name="v">A string whose value you want returned as a decimal value or a blob in which the first value is the decimal you want. The rest of the contents of the blob is ignored. Stringorblob can also be an Any variable containing a string or blob.</param>
            <returns>Decimal. Returns the value of stringorblob as a decimal. If stringorblob is not a valid PowerScript number or if it contains an incompatible datatype, Dec returns 0. If stringorblob is null, Dec returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Double(Sybase.PowerBuilder.PBAny)">
            <summary>
            Converts a string to a double or obtains a double value that is stored in a blob.
            </summary>
            <param name="v">A string whose value you want returned as a double or a blob in which the first value is the double value. The rest of the contents of the blob is ignored. Stringorblob can also be an Any variable containing a double or blob.</param>
            <returns>Double. Returns the contents of stringorblob as a double. If stringorblob is not a valid PowerScript number or if it contains a non-numeric datatype, Double returns 0. If stringorblob is null, Double returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Integer(Sybase.PowerBuilder.PBAny)">
            <summary>
            Converts the value of a string to an integer or obtains an integer value that is stored in a blob.
            </summary>
            <param name="v">A string whose value you want returned as an integer or a blob in which the first value is the integer value. The rest of the contents of the blob is ignored. Stringorblob can also be an Any variable containing a string or blob.</param>
            <returns>Integer. Returns the value of stringorblob as an integer if it succeeds and 0 if  stringorblob is not a valid number or is an incompatible datatype. If  stringorblob is null, Integer returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Byte(Sybase.PowerBuilder.PBAny)">
            <summary>
            Converts a number into a Byte datatype or obtains a Byte value stored in a blob.
            </summary>
            <param name="v">A String or any numeric datatype that you want to return as a Byte, or a Blob datatype in which the initial value is the Byte value that you want to return. The stringorblob variable can also have an Any datatype as long as it references a string, integer, uint, long, longlong, or blob. </param>
            <returns>Byte. Returns the value of the stringorblob variable as a Byte datatype if it succeeds; it returns 0 if the stringorblob variable is not a valid PowerScript number or if it has an incompatible datatype. If stringorblob is null, Byte returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.IsDate(Sybase.PowerBuilder.PBString)">
            <summary>
            Tests whether a string value is a valid date.
            </summary>
            <param name="d">A string whose value you want to test to determine whether it is a valid date</param>
            <returns>Boolean. Returns true if datevalue is a valid date and false if it is not. If datevalue is null, IsDate returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.IsTime(Sybase.PowerBuilder.PBString)">
            <summary>
            Reports whether the value of a string is a valid time value.
            </summary>
            <param name="d">A string whose value you want to test to determine whether it is a valid time</param>
            <returns>Boolean. Returns true if timevalue is a valid time and false if it is not. If  timevalue is null, IsTime returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.IsNumber(Sybase.PowerBuilder.PBString)">
            <summary>
            Reports whether the value of a string is a number.
            </summary>
            <param name="n">A string whose value you want to test to determine whether it is a valid PowerScript number</param>
            <returns>Boolean. Returns true if string is a valid PowerScript number and false if it is not. If string is null, IsNumber returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Long(Sybase.PowerBuilder.PBAny)">
            <summary>
            Converts a string whose value is a number into a long or obtains a long value stored in a blob.
            </summary>
            <param name="v">The string you want returned as a long or a blob in which the first value is the long value. The rest of the contents of the blob is ignored. Stringorblob can also be an Any variable containing a string or blob.</param>
            <returns>Long. Returns the value of stringorblob as a long if it succeeds and 0 if  stringorblob is not a valid PowerScript number or if it is an incompatible datatype. If stringorblob is null, Long returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Int(Sybase.PowerBuilder.PBDouble)">
            <summary>
            Determines the largest whole number less than or equal to a number.
            </summary>
            <param name="d">The number for which you want the largest whole number that is less than or equal to it</param>
            <returns>Integer. Returns the largest whole number less than or equal to n. If n is too small or too large to be represented as an integer, Int returns 0. If n is null, Int returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Long(Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt)">
            <summary>
            Combines two unsigned integers into a long value.
            </summary>
            <param name="l">An UnsignedInteger to be the low word in the long</param>
            <param name="h">An UnsignedInteger to be the high word in the long</param>
            <returns>Long. Returns the long if it succeeds and -1 if an error occurs. If any argument's value is null, Long returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.LongLong(Sybase.PowerBuilder.PBAny)">
            <summary>
            Converts a string whose value is a number into a longlong or obtains a longlong value stored in a blob.
            </summary>
            <param name="v">The string you want returned as a longlong or a blob in which the first value is the longlong value. The rest of the contents of the blob is ignored. Stringorblob can also be an Any variable containing a string or blob.</param>
            <returns>LongLong. Returns the value of stringorblob as a longlong if it succeeds and 0 if  stringorblob is not a valid PowerScript number or if it is an incompatible datatype. If stringorblob is null, Long returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.LongLong(Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBLong)">
            <summary>
            Combines two unsigned longs into a longlong value.
            </summary>
            <param name="l">An UnsignedLong to be the low word in the longlong</param>
            <param name="h">An UnsignedLong to be the high word in the longlong</param>
            <returns>LongLong. Returns the longlong if it succeeds and -1 if an error occurs. If any argument's value is null, LongLong returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Real(Sybase.PowerBuilder.PBAny)">
            <summary>
            Converts a string value to a real datatype or obtains a real value that is stored in a blob.
            </summary>
            <param name="v">The string whose value you want returned as a real value or a blob in which the first value is the real value. The rest of the contents of the blob is ignored. Stringorblob can also be an Any variable containing a string or blob.</param>
            <returns>Real. Returns the value of stringorblob as a real. If stringorblob is not a valid PowerScript number or is an incompatible datatype, Real returns 0. If stringorblob is null, Real returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.String(Sybase.PowerBuilder.PBAny)">
            <summary>
            Formats data, such as time or date values, according to a format mask. You can convert and format date, DateTime, numeric, and time data. You can also apply a display format to a string.
            </summary>
            <param name="v">The data you want returned as a string with the specified formatting. Data can have a date, DateTime, numeric, time, or string datatype. Data can also be an Any variable containing one of these datatypes.</param>
            <returns>String. Returns data in the specified format if it succeeds and the empty string ("") if the datatype of data does not match the type of display mask specified, format is not a valid mask, or data is an incompatible datatype.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.ReplaceFormat(Sybase.PowerBuilder.PBString)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.String(Sybase.PowerBuilder.PBAny,Sybase.PowerBuilder.PBString)">
            <summary>
            Formats data, such as time or date values, according to a format mask. You can convert and format date, DateTime, numeric, and time data. You can also apply a display format to a string.
            </summary>
            <param name="v">The data you want returned as a string with the specified formatting. Data can have a date, DateTime, numeric, time, or string datatype. Data can also be an Any variable containing one of these datatypes.</param>
            <param name="f">A string whose value is the display masks you want to use to format the data. The masks consists of formatting information specific to the datatype of data. If data is type string, format is required.The format can consist of more than one mask, depending on the datatype of data. Each mask is separated by a semicolon. (For details on each datatype, see Usage).</param>
            <returns>String. Returns data in the specified format if it succeeds and the empty string ("") if the datatype of data does not match the type of display mask specified, format is not a valid mask, or data is an incompatible datatype.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.String(Sybase.PowerBuilder.PBBlob,Sybase.PowerBuilder.PBEncodingValue)">
            <summary>
            Converts data in a blob to a string value. If the blob's value is not text data, String attempts to interpret the data as characters.
            </summary>
            <param name="b">The blob whose value you want returned as a string. Blob can also be an Any variable containing a blob.</param>
            <param name="e">Character encoding of the blob you want converted. Values are:
            ·	EncodingANSI!
            ·	EncodingUTF8!
            ·	EncodingUTF16LE! (default)
            ·	EncodingUTF16BE!</param>
            <returns>String. Returns the value of blob as a string if it succeeds and the empty string ("") if it fails. It the blob does not contain string data, String interprets the data as characters, if possible, and returns a string. If blob is null, String returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.GarbageCollect">
            <summary>
            Forces immediate garbage collection.
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.GarbageCollectGetTimeLimit">
            <summary>
            There is no time interval for garbage collect
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.GarbageCollectSetTimeLimit(Sybase.PowerBuilder.PBLong)">
            <summary>
            There is no time interval for garbage collect
            </summary>
            <param name="newTimeInMilliSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.ClassName(Sybase.PowerBuilder.PBAny,Sybase.PowerBuilder.PBBoolean)">
            <summary>
            Returns the name of the class with fully quallified if b is true else only class name
            </summary>
            
            <param name="v">datatype</param>
            <param name="b">if true returns the fullyquallified name </param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.ClassName(Sybase.PowerBuilder.PBAny)">
            <summary>
            Provides the datatype of a variable.
            </summary>
            <param name="v">The name of the variable for which you want to know its name (that is, its datatype)</param>
            <returns>String. Returns the name of variable. Returns the empty string ("") if variable  is an enumerated datatype or if an error occurs. If variable is null, ClassName returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.DebugBreak">
            <summary>
            Suspends execution and opens the Debug window.
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.IntHigh(Sybase.PowerBuilder.PBLong)">
            <summary>
            Returns the high word of a long value.
            </summary>
            <param name="v">A long value</param>
            <returns>Integer. Returns the high word of long if it succeeds and -1 if an error occurs. If long is null, IntHigh returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.IntLow(Sybase.PowerBuilder.PBLong)">
            <summary>
            Returns the low word of a long value.
            </summary>
            <param name="v">A long value</param>
            <returns>Integer. Returns the low word of long if it succeeds and -1 if an error occurs. If long is null, IntLow returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.IsValid(Sybase.PowerBuilder.PBPowerObject)">
            <summary>
            Determines whether an object variable is instantiated—whether its value is a valid object handle.
            </summary>
            <param name="o">An object variable or a variable of type Any—typically a reference to an object that you are testing for validity</param>
            <returns>Boolean. Returns true if objectvariable is an instantiated object. Returns false if objectvariable is not an object, or if it is an object that is not instantiated. If objectvariable is null, IsValid returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.IsValid(System.Object)">
            <summary>
            Determines whether an object variable is instantiated—whether its value is a valid object handle.
            </summary>
            <param name="o">An object variable or a variable of type Any—typically a reference to an object that you are testing for validity</param>
            <returns>Boolean. Returns true if objectvariable is an instantiated object. Returns false if objectvariable is not an object, or if it is an object that is not instantiated. If objectvariable is null, IsValid returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.KeyDown(Sybase.PowerBuilder.PBInt)">
            <summary>
            Determines whether the user pressed the specified key on the computer keyboard.
            </summary>
            <param name="k">A value of the KeyCode enumerated datatype that identifies a key on the computer keyboard or an integer whose value is the ASCII code for a key. Not all ASCII values are recognized; see Usage. See also the table of KeyCode values in Usage.</param>
            <returns>Boolean. Returns true if keycode was pressed and false if it was not. If  keycode is null, KeyDown returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.KeyDown(Sybase.PowerBuilder.PBKeyCodeValue)">
            <summary>
            Determines whether the user pressed the specified key on the computer keyboard.
            </summary>
            <param name="k">A value of the KeyCode enumerated datatype that identifies a key on the computer keyboard or an integer whose value is the ASCII code for a key. Not all ASCII values are recognized; see Usage. See also the table of KeyCode values in Usage.</param>
            <returns>Boolean. Returns true if keycode was pressed and false if it was not. If  keycode is null, KeyDown returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PixelsToUnits(Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBConvertTypeValue)">
            <summary>
            Converts pixels to PowerBuilder units. Because pixels are not usually square, you also specify whether you are converting the pixels' horizontal or vertical measurement.
            </summary>
            <param name="u">An integer whose value is the number of pixels you want to convert to PowerBuilder units.</param>
            <param name="t">A value of the ConvertType enumerated datatype value indicating how to convert the value:
            ·	XPixelsToUnits! - Convert the pixels in the horizontal direction.
            ·	YPixelsToUnits! - Convert the pixels in the vertical direction.</param>
            <returns>Integer. Returns the converted value if it succeeds and -1 if an error occurs. If any argument's value is null, PixelsToUnits returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.UnitsToPixels(Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBConvertTypeValue)">
            <summary>
            Converts PowerBuilder units to pixels and reports the measurement. Because pixels are not usually square, you also specify whether to convert in the horizontal or vertical direction.
            </summary>
            <param name="u">An integer whose value is the number of PowerBuilder units you want to convert to pixels</param>
            <param name="t">A value of the ConvertType enumerated datatype indicating how to convert the value:
            ·	XUnitsToPixels! - Convert the units in the horizontal direction
            ·	YUnitsToPixels! - Convert the units in the vertical direction</param>
            <returns>Integer. Returns the converted value if it succeeds and -1 if an error occurs. If any argument's value is null, UnitsToPixels returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.RGB(Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt)">
            <summary>
            Calculates the long value that represents the color specified by numeric values for the red, green, and blue components of the color.
            </summary>
            <param name="red">The integer value of the red component of the desired color</param>
            <param name="green">The integer value of the green component of the desired color</param>
            <param name="blue">The integer value of the blue component of the desired color</param>
            <returns>Long. Returns the long that represents the color created by combining the values specified in red, green, and blue. If an error occurs, RGB returns -1. If any argument's value is null, RGB returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Sleep(Sybase.PowerBuilder.PBLong)">
            <summary>
            Causes the application to pause for a specified time.
            </summary>
            <param name="s">Long for the number of seconds you want the application to pause</param>
            <returns>Integer. Returns 1 if the function succeeds and -1 if an error occurs.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Date(Sybase.PowerBuilder.PBAny)">
            <summary>
            Extracts a date from a DateTime value or from a blob whose first value is a date or DateTime value.
            </summary>
            <param name="AnyType">A DateTime value or a blob in which the first value is a date or DateTime value. The rest of the contents of the blob is ignored.  Datetime can also be an Any variable containing a DateTime or blob.</param>
            <returns>Date. Returns the date in datetime as a date. If datetime contains an invalid date or an incompatible datatype, Date returns 1900-01-01. If datetime is null, Date returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Date(Sybase.PowerBuilder.PBString)">
            <summary>
            Converts a string whose value is a valid date to a date value.
            </summary>
            <param name="DateString">A string containing a valid date (such as January 1, 2002, or 12-31-99) that you want returned as a date. Datetime can also be an Any variable containing a string.</param>
            <returns>Date. Returns the date in string as a date. If string contains an invalid date or an incompatible datatype, Date returns 1900-01-01. If string is null, Date returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Date(Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt)">
            <summary>
            Combines numbers representing the year, month, and day into a date value.
            </summary>
            <param name="y">The 4-digit year (1 to 9999) of the date</param>
            <param name="m">The 1- or 2-digit integer for the month (1 to 12) of the year</param>
            <param name="d">The 1- or 2-digit integer for the day (1 to 31) of the month</param>
            <returns>Date. Returns the date specified by the integers for year, month, and day as a date datatype. If any value is invalid (out of the range of values for dates), Date returns 1900-01-01. If any argument's value is null, Date returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.DateTime(Sybase.PowerBuilder.PBAny)">
            <summary>
            Extracts a DateTime value from a blob.
            </summary>
            <param name="AnyType">A blob in which the first value is a DateTime value. The rest of the contents of the blob is ignored. Blob can also be an Any variable containing a blob.</param>
            <returns>DateTime. Returns the DateTime value stored in blob. If blob is null, DateTime returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.DateTime(Sybase.PowerBuilder.PBDate,Sybase.PowerBuilder.PBTime)">
            <summary>
            Combines a date value and a time value into a DateTime value.
            </summary>
            <param name="d">A value of type date.</param>
            <param name="t">A value of type time.If you specify time, only the hour portion is required.</param>
            <returns>Combines a date value and a time value into a DateTime value.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Day(Sybase.PowerBuilder.PBDate)">
            <summary>
            Obtains the day of the month in a date value.
            </summary>
            <param name="d">A date value from which you want the day</param>
            <returns>Integer. Returns an integer (1 to 31) representing the day of the month in date. If date is null, Day returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Month(Sybase.PowerBuilder.PBDate)">
            <summary>
            Determines the month of a date value.
            </summary>
            <param name="d">The date from which you want the month</param>
            <returns>Integer. Returns an integer (1 to 12) whose value is the month portion of date. If date is null, Month returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Year(Sybase.PowerBuilder.PBDate)">
            <summary>
            Determines the year of a date value.
            </summary>
            <param name="d">The date from which you want the year</param>
            <returns>Integer. Returns an integer whose value is a 4-digit year adapted from the year portion of date if it succeeds and 1900 if an error occurs. If date is null, Year returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.DayName(Sybase.PowerBuilder.PBDate)">
            <summary>
            Determines the day of the week in a date value and returns the weekday's name.
            </summary>
            <param name="d">A date value for which you want the name of the day</param>
            <returns>String. Returns a string whose value is the weekday (Sunday, Monday, and so on) of date. If date is null, DayName returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.DayNumber(Sybase.PowerBuilder.PBDate)">
            <summary>
            Determines the day of the week of a date value and returns the number of the weekday.
            </summary>
            <param name="d">The date value from which you want the number of the day of the week</param>
            <returns>nteger. Returns an integer (1-7) representing the day of the week of date. Sunday is day 1, Monday is day 2, and so on. If date is null, DayNumber returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.DaysAfter(Sybase.PowerBuilder.PBDate,Sybase.PowerBuilder.PBDate)">
            <summary>
            Determines the number of days one date occurs after another.
            </summary>
            <param name="d1">A date value that is the start date of the interval being measured</param>
            <param name="d2">A date value that is the end date of the interval</param>
            <returns>Long. Returns a long whose value is the number of days date2 occurs after  date1. If date2 occurs before date1, DaysAfter returns a negative number. If any argument's value is null, DaysAfter returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Hour(Sybase.PowerBuilder.PBTime)">
            <summary>
            Obtains the hour in a time value. The hour is based on a 24-hour clock.
            </summary>
            <param name="t">The time from which you want to obtain the hour</param>
            <returns>Integer. Returns an integer (00 to 23) whose value is the hour portion of time. If time is null, Hour returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Minute(Sybase.PowerBuilder.PBTime)">
            <summary>
            Obtains the number of minutes in the minutes portion of a time value.
            </summary>
            <param name="t">The time value from which you want the minutes</param>
            <returns>Integer. Returns the minutes portion of time (00 to 59). If time is null, Minute returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Second(Sybase.PowerBuilder.PBTime)">
            <summary>
            Obtains the number of seconds in the seconds portion of a time value.
            </summary>
            <param name="t">The time value from which you want the seconds</param>
            <returns>Integer. Returns the seconds portion of time (00 to 59). If time is null, Second returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.SecondsAfter(Sybase.PowerBuilder.PBTime,Sybase.PowerBuilder.PBTime)">
            <summary>
            Determines the number of seconds one time occurs after another.
            </summary>
            <param name="StartTime">A time value that is the start time of the interval being measured</param>
            <param name="EndTime">A time value that is the end time of the interval</param>
            <returns>Long. Returns the number of seconds time2 occurs after time1. If time2 occurs before time1, SecondsAfter returns a negative number. If any argument's value is null, SecondsAfter returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Today">
            <summary>
            Obtains the system date and, in some cases, the system time.
            </summary>
            <returns>Date. Returns the current system date.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.RelativeDate(Sybase.PowerBuilder.PBDate,Sybase.PowerBuilder.PBInt)">
            <summary>
            Obtains the date that occurs a specified number of days after or before another date.
            </summary>
            <param name="date">A value of type date</param>
            <param name="days">An integer indicating a number of days</param>
            <returns>Date. Returns the date that occurs n days after date if n is greater than 0. Returns the date that occurs n days before date if n is less than 0. If any argument's value is null, RelativeDate returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.RelativeTime(Sybase.PowerBuilder.PBTime,Sybase.PowerBuilder.PBLong)">
            <summary>
            Obtains a time that occurs a specified number of seconds after or before another time within a 24-hour period.
            </summary>
            <param name="time">A value of type time</param>
            <param name="seconds">A long number of seconds</param>
            <returns>Time. Returns the time that occurs n seconds after time if n is greater than 0. Returns the time that occurs n seconds before time if n is less than 0. The maximum return value is 23:59:59. If any argument's value is null, RelativeTime returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Now">
            <summary>
            Obtains the current time based on the system time of the client machine.
            </summary>
            <returns>Time. Returns the current time based on the system time of the client machine.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Time(Sybase.PowerBuilder.PBString)">
            <summary>
            Converts a string containing a valid time into a time value.
            </summary>
            <param name="TimeString">A string whose value is a valid time (such as 8am or 10:25) that you want returned as a time. Only the hour is required; you do not have to include the minutes, seconds, or microseconds of the time or am or pm.The default value is 00 for minutes and seconds and 000000 for microseconds. PowerBuilder determines whether the time is am or pm based on a 24-hour clock.String can also be an Any variable containing a string or blob.</param>
            <returns>Time. Returns the time in string as a time. If string does not contain a valid time or is an incompatible datatype, Time returns 00:00:00.000000. If string is null, Time returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Time(Sybase.PowerBuilder.PBAny)">
            <summary>
            Extracts a time value from a DateTime value or a blob.
            </summary>
            <param name="AnyType">A DateTime value or a blob in which the first value is a time or DateTime value. The rest of the contents of the blob is ignored.  Datetime can also be an Any variable containing a DateTime or blob.</param>
            <returns>Time. Returns the time in datetime as a time. If datetime does not contain a valid time or is an incompatible datatype, Time returns 00:00:00.000000. If  datetime is null, Time returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Time(Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt)">
            <summary>
            Combines integers representing hours, minutes, seconds, and microseconds into a time value.
            </summary>
            <param name="Hour">The integer for the hour (00 to 23) of the time</param>
            <param name="Minute">The integer for the minutes (00 to 59) of the time</param>
            <param name="Second">The integer for the seconds (0 to 59) of the time</param>
            <returns>Time. Returns the time as a time datatype and 00:00:00 if the value in any argument is not valid (out of the specified range of values). If any argument is null, Time returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Time(Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt)">
            <summary>
            Combines integers representing hours, minutes, seconds, and microseconds into a time value.
            </summary>
            <param name="Hour">The integer for the hour (00 to 23) of the time</param>
            <param name="Minute">The integer for the minutes (00 to 59) of the time</param>
            <param name="Second">The integer for the seconds (0 to 59) of the time</param>
            <param name="MicroSecs">The integer for the microseconds (0 to 32767) of the time (note that the range of values supported for this argument is less than the total range of values possible for a microsecond) </param>
            <returns>Time. Returns the time as a time datatype and 00:00:00 if the value in any argument is not valid (out of the specified range of values). If any argument is null, Time returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintOpen">
            <summary>
            Opens a print job and assigns it a number, which you use in other printing statements.
            </summary>
            /// <returns>Long. Returns the job number if it succeeds and -1 if an error occurs. If the Print dialog box displays and the user presses Cancel, PrintOpen returns -1. If any argument's value is null, PrintOpen returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintOpen(Sybase.PowerBuilder.PBString)">
            <summary>
            Opens a print job and assigns it a number, which you use in other printing statements.
            </summary>
            <param name="v">A string specifying a name for the print job. The name is displayed in the Windows Print Manager dialog box and in the Spooler dialog box.</param>
            <returns>Long. Returns the job number if it succeeds and -1 if an error occurs. If the Print dialog box displays and the user presses Cancel, PrintOpen returns -1. If any argument's value is null, PrintOpen returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintOpen(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBBoolean)">
            <summary>
            Opens a print job and assigns it a number, which you use in 
            other printing statements.
            </summary>
            <param name="n">A string specifying a name for the print job. The name is displayed in the Windows Print Manager dialog box and in the Spooler dialog box.</param>
            <param name="showPrintDlg">A boolean value indicating whether you want to display the system Print dialog box that allows the user to select a printer or set print properties. Values are:
            TRUE - Display the dialog box
            FALSE - (default) Do not display the dialog box</param>
            <returns>Long. Returns the job number if it succeeds and -1 if 
            an error occurs. If the Print dialog box displays and the user 
            presses Cancel, PrintOpen returns -1. If any argument's value 
            is null, PrintOpen returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintPage(Sybase.PowerBuilder.PBLong)">
            <summary>
            Sends the current page to the printer or spooler and begins a new blank 
            page in the current print job.
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job</param>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs. 
            If any argument's value is null, PrintPage returns null</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintCancel(Sybase.PowerBuilder.PBLong)">
            <summary>
            Cancels printing and deletes the spool file, if any. Cancels printing 
            of a print job that you opened with the PrintOpen function. The print 
            job is identified by the number returned by PrintOpen. 
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job</param>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs. 
            If printjobnumber is null, PrintCancel returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintClose(Sybase.PowerBuilder.PBLong)">
            <summary>
            Sends the current page to the printer (or spooler) and closes the job. 
            Call PrintClose as the last command of a print job unless PrintCancel 
            function has closed the job.
            </summary>
            <param name="n">The number the PrintOpen function assigned to the print job</param>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs. If 
            printjobnumber is null, PrintClose returns null</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Print(Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBString)">
            <summary>
            String print functions:
            Sends one or more lines of text as part of a print job that you have opened with the 
            PrintOpen function. You can specify tab settings before or after the text. The tab 
            settings control the text's horizontal position on the page.
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job.</param>
            <param name="s">The string you want to print. If the string includes carriage return-newline 
            character pairs (~r~n), the string will print on multiple lines. However, the initial 
            tab position is ignored on subsequent lines.</param>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs. If any argument's 
            value is null, Print returns null</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Print(Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBInt)">
            <summary>
            String print functions:
            Sends one or more lines of text as part of a print job that you have opened with the 
            PrintOpen function. You can specify tab settings before or after the text. The tab 
            settings control the text's horizontal position on the page.
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job.</param>
            <param name="s">The string you want to print. If the string includes carriage return-newline 
            character pairs (~r~n), the string will print on multiple lines. However, the initial 
            tab position is ignored on subsequent lines.</param>
            <param name="n">The new position, measured from the left edge of the 
            print area in thousandths of a inch, of the print cursor after string printed. If the 
            print cursor is already at or beyond the specified position, Print ignores tab2 and 
            the print cursor remains at the end of the text. If you omit tab2, Print moves the 
            print cursor to the beginning of a new line.</param>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs. If any argument's 
            value is null, Print returns null</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Print(Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBString)">
            <summary>
            String print functions:
            Sends one or more lines of text as part of a print job that you have opened with the 
            PrintOpen function. You can specify tab settings before or after the text. The tab 
            settings control the text's horizontal position on the page.
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job.</param>
            <param name="t">The position, measured from the left edge of the print 
            area in thousandths of a inch, to which the print cursor should move before string is 
            printed. If the print cursor is already at or beyond the position or if you omit tab1, 
            Print starts printing at the current position of the print cursor.</param>
            <param name="s">The string you want to print. If the string includes carriage return-newline 
            character pairs (~r~n), the string will print on multiple lines. However, the initial 
            tab position is ignored on subsequent lines.</param>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs. If any argument's 
            value is null, Print returns null</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Print(Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBInt)">
            <summary>
            String print functions:
            Sends one or more lines of text as part of a print job that you have opened with the 
            PrintOpen function. You can specify tab settings before or after the text. The tab 
            settings control the text's horizontal position on the page.
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job.</param>
            <param name="t1"> (optional)	The position, measured from the left edge of the print 
            area in thousandths of a inch, to which the print cursor should move before string is 
            printed. If the print cursor is already at or beyond the position or if you omit tab1, 
            Print starts printing at the current position of the print cursor.</param>
            <param name="s">The string you want to print. If the string includes carriage return-newline 
            character pairs (~r~n), the string will print on multiple lines. However, the initial 
            tab position is ignored on subsequent lines.</param>
            <param name="t2"> (optional)	The new position, measured from the left edge of the 
            print area in thousandths of a inch, of the print cursor after string printed. If the 
            print cursor is already at or beyond the specified position, Print ignores tab2 and 
            the print cursor remains at the end of the text. If you omit tab2, Print moves the 
            print cursor to the beginning of a new line.</param>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs. If any argument's 
            value is null, Print returns null</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintBitmap(Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt)">
            <summary>
            Writes a bitmap at the specified location on the current page.
            
            USAGE: PrintBitmap does not change the position of the print cursor, which remains where 
            it was before the function was called. In general, print functions in which you specify 
            coordinates do not affect the print cursor (see the functions listed in See also).
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job.</param>
            <param name="f">A string whose value is the file name of the bitmap image</param>
            <param name="x">An integer whose value is the x coordinate (in thousandths of an inch) on 
            the page of the bitmap image.</param>
            <param name="y">An integer whose value is the y coordinate (in thousandths of an inch) on 
            the page of the bitmap image</param>
            <param name="w">The integer width of the bitmap image in thousandths of an inch. If width 
            is 0, PowerBuilder uses the original width of the image</param>
            <param name="h">The integer height of the bitmap image in thousandths of an inch. If 
            height is 0, PowerBuilder uses the original height of the image</param>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs. If any argument's 
            value is null, PrintBitmap returns null</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintDefineFont(Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBFontPitchValue,Sybase.PowerBuilder.PBFontFamilyValue,Sybase.PowerBuilder.PBBoolean,Sybase.PowerBuilder.PBBoolean)">
            <summary>
            Creates a numbered font definition that consists of a font supported by your printer 
            and a set of font properties. You can use the font number in the PrintSetFont or 
            PrintText functions. You can define up to eight fonts at a time
            
            NOTE:
            You can use as many as eight fonts in one print job. If you require more than eight 
            fonts in one job, you can call PrintDefineFont again to change the settings for a 
            font number.
            Use PrintSetFont to make a font number the current font for the open print job.
            Fonts in Microsoft Windows      Although the fontfamily argument seems to duplicate 
            information in the font name, Windows uses it along with the font name to identify 
            the correct font or substitute a similar font if the named font is unavailable.
            Font names and sizes      Some font names include a size, especially monospaced fonts 
            which include characters per inch. This is the recommended size for the font and does 
            not affect the printed size, which you specify with the height argument.
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job.</param>
            <param name="t">The number (1 to 8) you want to assign to the font.</param>
            <param name="n">A string whose value is the name of a typeface supported by your printer (for example, Courier 10Cpi).</param>
            <param name="h">An integer whose value is the height of the type in thousandths of an inch (for example, 250 for 18-point 10Cpi) or a negative number representing the point size (for example, -18 for 18-point). Specifying the point size is more exact; the height in thousandths of an inch only approximates the point size.</param>
            <param name="w">The stroke weight of the type. Normal weight is 400 and bold is 700.</param>
            <param name="p">A value of the FontPitch enumerated datatype indicating the pitch of the font:
            Default!
            Fixed!
            Variable!</param>
            <param name="f">A value of the FontFamily enumerated datatype indicating the family of the font:
            AnyFont!
            Decorative!
            Modern!
            Roman!
            Script!
            Swiss!</param>
            <param name="i">A boolean value indicating whether the font is italic. The default is false (not italic).</param>
            <param name="u">A boolean value indicating whether the font is underlined. The default is false (not underlined).</param>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs. If any argument's 
            value is null, PrintDefineFont returns null</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintSetFont(Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBInt)">
            <summary>
            Designates a font to be used for text printed with the Print function. You 
            specify the font by number. Use PrintDefineFont to associate a font number 
            with the desired font, a size, and a set of properties
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job</param>
            <param name="n">The number (1 to 8) of a font defined for the job in PrintDefineFont or 0 (the default font for the printer)</param>
            <returns>Integer. Returns the character height of the current font if it 
            succeeds and -1 if an error occurs. If any argument's value is null, 
            PrintSetFont returns null</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintSetSpacing(Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBReal)">
            <summary>
            Sets the factor that PowerBuilder uses to calculate line spacing.
            
            NOTE:
            Line spacing in PowerBuilder is proportional to character height. The default 
            line spacing is 1.2 times the character height. When Print starts a new line, 
            it sets the x coordinate of the cursor to 0 and increases the y coordinate by 
            the current line spacing. The PrintSetSpacing function lets you specify a new 
            factor to be multiplied by the character height for an open print job
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job.</param>
            <param name="s">The number by which you want to multiply the character height to determine the vertical line-to-line spacing. The default is 1.2.</param>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs. 
            If any argument's value is null, PrintSetSpacing returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintLine(Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt)">
            <summary>
            Draws a line of a specified thickness between the specified endpoints on the current 
            print page
            
            NOTE:
            PrintLine does not change the position of the print cursor, which remains where it 
            was before the function was called
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job</param>
            <param name="x1">An integer specifying the x coordinate in thousandths of an inch of the start of the line</param>
            <param name="y1">An integer specifying the y coordinate in thousandths of an inch of the start of the line</param>
            <param name="x2">An integer specifying the x coordinate in thousandths of an inch of the end of the line</param>
            <param name="y2">An integer specifying the y coordinate in thousandths of an inch of the end of the line</param>
            <param name="t">An integer specifying the thickness of the line in thousandths of an inch</param>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs. If any argument's 
            value is null, PrintLine returns null</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintOval(Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt)">
            <summary>
            Draws a white oval outlined in a line of the specified thickness on the print page.
            
            NOTE:
            The PrintOval, PrintRect, and PrintRoundRect functions draw filled shapes. To print 
            other shapes or text inside the shapes, draw the filled shape first and then add 
            text and other shapes or lines inside it. If you draw the filled shape after other 
            printing functions, it will cover anything inside it. For example, to draw a border 
            around text and lines, draw the oval or rectangular border first and then use 
            PrintLine and PrintText to position the lines and text inside.
            PrintOval does not change the position of the print cursor, which remains where it 
            was before the function was called. In general, print functions in which you specify 
            coordinates do not affect the print cursor.
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job</param>
            <param name="x">An integer specifying the x coordinate in thousandths of an inch of the upper-left corner of the oval's bounding box</param>
            <param name="y">An integer specifying the y coordinate in thousandths of an inch of the upper-left corner of the oval's bounding box</param>
            <param name="w">An integer specifying the width in thousandths of an inch of the oval's bounding box</param>
            <param name="h">An integer specifying the height in thousandths of an inch of the oval's bounding box</param>
            <param name="t">An integer specifying the thickness of the line that outlines the oval in thousandths of an inch</param>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs. If any 
            argument's value is null, PrintOval returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintRect(Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt)">
            <summary>
            Draws a white rectangle with a border of the specified thickness on the print page. 
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job</param>
            <param name="x">An integer specifying the x coordinate in thousandths of an inch of the upper-left corner of the rectangle</param>
            <param name="y">An integer specifying the y coordinate in thousandths of an inch of the upper-left corner of the rectangle</param>
            <param name="w">An integer specifying the rectangle's width in thousandths of an inch</param>
            <param name="h">An integer specifying the rectangle's height in thousandths of an inch</param>
            <param name="t">An integer specifying the thickness of the rectangle's border line in thousandths of an inch</param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintRoundRect(Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt)">
            <summary>
            Draws a white rectangle with rounded corners and a border of the specified thickness 
            on the print page.
            
            NOTE:
            The PrintOval, PrintRect, and PrintRoundRect functions draw filled shapes. To print 
            other shapes or text inside the shapes, draw the filled shape first and then add text 
            and other shapes or lines inside it. If you draw the filled shape after other printing 
            functions, it will cover anything inside it. For example, to draw a border around text 
            and lines, draw the oval or rectangular border first and then use PrintLine and PrintText 
            to position the lines and text inside.
            PrintRoundRect does not change the position of the print cursor, which remains where 
            it was before the function was called. In general, print functions in which you specify 
            coordinates do not affect the print cursor.
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job</param>
            <param name="x">An integer specifying the x coordinate in thousandths of an inch of the upper-left corner of the rectangle</param>
            <param name="y">An integer specifying the y coordinate in thousandths of an inch of the upper-left corner of the rectangle</param>
            <param name="w">An integer specifying the rectangle's width in thousandths of an inch</param>
            <param name="h">An integer specifying the rectangle's height in thousandths of an inch</param>
            <param name="x1">An integer specifying the x radius of the corner rounding</param>
            <param name="y1">An integer specifying the y radius of the corner rounding</param>
            <param name="t">An integer specifying the thickness of the rectangle's border line in thousandths of an inch</param>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs. If any argument's 
            value is null, PrintRoundRect returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintText(Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt)">
            <summary>
            Prints a single line of text starting at the specified coordinates.
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job.</param>
            <param name="s">A string whose value is the text you want to print.</param>
            <param name="x">An integer specifying the x coordinate in thousandths of an inch of the beginning of the text.</param>
            <param name="y">An integer specifying the y coordinate in thousandths of an inch of the beginning of the text.</param>
            <returns>Integer. Returns the x coordinate of the new cursor location (that is, the value of the parameter x plus the width of the text) if it succeeds. PrintText returns -1 if an error occurs. If any argument's value is null, PrintText returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintText(Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt,Sybase.PowerBuilder.PBInt)">
            <summary>
            Prints a single line of text starting at the specified coordinates
            
            NOTE:
            PrintText does change the position of the print cursor, unlike the other 
            print functions for which you specify coordinates. The print cursor moves 
            to the end of the printed text. PrintText also returns the x coordinate 
            of the print cursor. You can use the return value to determine where to 
            begin printing additional text.
            PrintText does not change the print cursor's y coordinate, which is its 
            vertical position on the page.
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job.</param>
            <param name="s">A string whose value is the text you want to print.</param>
            <param name="x">An integer specifying the x coordinate in thousandths of an inch of the beginning of the text.</param>
            <param name="y">An integer specifying the y coordinate in thousandths of an inch of the beginning of the text.</param>
            <param name="n">The number (1 to 8) of a font defined for the job by using the PrintDefineFont function or 0 (the default font for the printer). If you omit fontnumber, the text prints in the current font for the print job.</param>
            <returns>Integer. Returns the x coordinate of the new cursor location 
            (that is, the value of the parameter x plus the width of the text) if 
            it succeeds. PrintText returns -1 if an error occurs. If any argument's 
            value is null, PrintText returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintWidth(Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.PBString)">
            <summary>
            Determines the width of a string using the current font of the specified 
            print job
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job</param>
            <param name="s">A string whose value is the text for which you want to determine the width</param>
            <returns>Integer. Returns the width of string in thousandths of an inch 
            using the current font of printjobnumber if it succeeds and -1 if an 
            error occurs. If any argument's value is null, PrintWidth returns null. 
            If the returned width exceeds the maximum integer limit (+32767), PrintWidth
             returns -1.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintX(Sybase.PowerBuilder.PBLong)">
            <summary>
            Reports the x coordinate of the print cursor
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job</param>
            <returns>Integer. Returns the x coordinate of the print cursor if it 
            succeeds and -1 if an error occurs. If any argument's value is null, 
            PrintX returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintY(Sybase.PowerBuilder.PBLong)">
            <summary>
            Reports the y coordinate of the print cursor
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job</param>
            <returns>Integer. Returns the y coordinate of the cursor if it succeeds 
            and -1 if an error occurs. If any argument's value is null, PrintY 
            returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.PrintDataWindow(Sybase.PowerBuilder.PBLong,Sybase.PowerBuilder.IPBDataWindowBase)">
            <summary>
            Prints the contents of a DataWindow control or DataStore as a print job.
            </summary>
            <param name="j">The number the PrintOpen function assigned to the print job</param>
            <param name="d">The name of the DataWindow control, child DataWindow, or DataStore containing the DataWindow object you want to print</param>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, PrintDataWindow returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.LowerBound(Sybase.PowerBuilder.PBAny)">
            <summary>
            Obtains the lower bound of a dimension of an array.
            </summary>
            <param name="a">
            The name of the array for which you want the lower bound of a dimension.
            </param>
            <returns>
            Long. Returns the lower bound of dimension n of array and -1 if n 
            is greater than the number of dimensions of the array. If any 
            argument's value is null, LowerBound returns null.
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.LowerBound(Sybase.PowerBuilder.PBAny,Sybase.PowerBuilder.PBInt)">
            <summary>
            Obtains the lower bound of a dimension of an array.
            </summary>
            <param name="a">
            The name of the array for which you want the lower bound of a dimension.
            </param>
            <param name="dimension">
            The number of the dimension for which you want the lower bound. The default is 1.
            </param>
            <returns>
            Long. Returns the lower bound of dimension n of array and -1 if n 
            is greater than the number of dimensions of the array. If any 
            argument's value is null, LowerBound returns null.
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.UpperBound(Sybase.PowerBuilder.PBAny)">
            <summary>
            Obtains the upper bound of a dimension of an array.
            </summary>
            <param name="a">
            The name of the array for which you want the upper bound of a dimension
            </param>
            <returns>
            Long. Returns the upper bound of dimension n of array. 
            If n is greater than the number of dimensions of the array, 
            UpperBound returns -1. If any argument's value is null, 
            UpperBound returns null.
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.UpperBound(Sybase.PowerBuilder.PBAny,Sybase.PowerBuilder.PBInt)">
            <summary>
            Obtains the upper bound of a dimension of an array.
            </summary>
            <param name="a">
            The name of the array for which you want the upper bound of a dimension
            </param>
            <param name="dimension">
            The number of the dimension for which you want the upper bound. The default is 1
            </param>
            <returns>
            Long. Returns the upper bound of dimension n of array. 
            If n is greater than the number of dimensions of the array, 
            UpperBound returns -1. If any argument's value is null, 
            UpperBound returns null.
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.FindClassDefinition(Sybase.PowerBuilder.PBString)">
            <summary>
            Searches for an object in one or more PowerBuilder libraries (PBLs) and provides information about its class definition.
            </summary>
            <param name="n">The name of an object (also called a class or class definition) for which you want information.</param>
            <returns>ClassDefinition. Returns an object reference with information about the definition of classname. If any arguments are null, FindClassDefinition returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.FindClassDefinition(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBArray)">
            <summary>
            Searches for an object in one or more PowerBuilder libraries (PBLs) and provides information 
            about its class definition.
            
            Usage:
            1. There are two ways to get a ClassDefinition object containing class definition information:
            2. For an instantiated object in your application, use its ClassDefinition property
            3. For an object stored in a PBL, call FindClassDefinition
            </summary>
            <param name="name">The name of an object (also called a class or class definition) for which 
            you want information.</param>
            <param name="liblist"> (optional)	An array of strings whose values are the fully qualified 
            pathnames of PBLs. If you omit librarylist, FindClassDefinition searches the library list 
            associated with the running application.</param>
            <returns>ClassDefinition. Returns an object reference with information about the definition 
            of classname. If any arguments are null, FindClassDefinition returns null.
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.FindFunctionDefinition(Sybase.PowerBuilder.PBString)">
            <summary>
            Searches for a global function in one or more PowerBuilder libraries (PBLs) and provides information about the script definition.
            </summary>
            <param name="n">The name of a global function for which you want information.</param>
            <returns>ScriptDefinition. Returns an object reference with information about the script of functionname. If any arguments are null, FindFunctionDefinition returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.FindFunctionDefinition(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBArray)">
            <summary>
            Searches for a global function in one or more PowerBuilder libraries (PBLs) and provides 
            information about the script definition.
            
            Usage: You can call FindClassDefinition to get a class definition for a global function. 
            However, the ScriptDefinition object provides information tailored for functions.
            </summary>
            <param name="n">The name of a global function for which you want information.</param>
            <param name="l"> (optional)	An array of strings whose values are the fully qualified pathnames 
            of PBLs. If you omit librarylist, FindFunctionDefinition searches the library list associated 
            with the running application.</param>
            <returns>ScriptDefinition. Returns an object reference with information about the script of 
            functionname. If any arguments are null, FindFunctionDefinition returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.FindTypeDefinition(Sybase.PowerBuilder.PBString)">
            <summary>
            This function will search the user defined types in the current running application, or in system defined 
            types
            </summary>
            <param name="n">The name of a simple datatype, enumerated datatype, or class for which you want information. To find a type definition for a nested type, use this form:libraryEntryName`typename</param>
            <returns>TypeDefinition. Returns an object reference with information about the definition of typename. If any arguments are null, FindTypeDefinition returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.FindTypeDefinition(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBArray)">
            <summary>
            Searches for a type in one or more PowerBuilder libraries (PBLs) and provides information about 
            its type definition. You can also get type definitions for system types.
            
            Usage:
            The returned TypeDefinition object is a ClassDefinition, SimpleTypeDefinition, or EnumerationDefinition 
            object. You can test the Category property to find out which one it is.
            
            If you want to get information for a class, call FindClassDefinition instead. The arguments are 
            the same and you are saved the step of checking that the returned object is a ClassDefinition object.
            
            If you want to get information for a global function, call FindFunctionDefinition.
            </summary>
            <param name="n">The name of a simple datatype, enumerated datatype, or class for which you want 
            information. To find a type definition for a nested type, use this form:libraryEntryName`typename
            
            Comment:
            There are several combinations of how a PB type resides, depending on 2 status of PB types:
            1. Whether the PB type has beem compiled into .NET type;
            2. Whether the .NET PB type has its PowerScript style type in a PBL files
            </param>
            <param name="l">Optional.
            An array of strings whose values are the fully qualified pathnames of PBLs. If you omit librarylist, 
            FindTypeDefinition searches the library list associated with the running application.PowerBuilder 
            also searches its own libraries for built-in definitions, such as enumerated datatypes and system 
            classes.
            </param>
            <returns>TypeDefinition. Returns an object reference with information about the definition of typename. 
            If any arguments are null, FindTypeDefinition returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.CPU">
            <summary>
            CPU	Obtain the number of milliseconds of CPU time elapsed since 
            the start of the current PowerBuilder application.
            </summary>
            <returns>Long. Returns the number of milliseconds of CPU time elapsed since the start of your PowerBuilder application.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Abs(Sybase.PowerBuilder.PBDouble)">
            <summary>
            Calculates the absolute value of a number.
            </summary>
            <param name="v">The number for which you want the absolute value</param>
            <returns>The datatype of n. Returns the absolute value of n. If n is null, Abs returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.ACos(Sybase.PowerBuilder.PBDouble)">
            <summary>
            Calculates the arccosine of an angle.
            </summary>
            <param name="v">The ratio of the lengths of two sides of a triangle for which you want a corresponding angle (in radians). The ratio must be a value between -1 and 1.</param>
            <returns>Double. Returns the arccosine of n.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.ASin(Sybase.PowerBuilder.PBDouble)">
            <summary>
            Calculates the arcsine of an angle.
            </summary>
            <param name="v">The ratio of the lengths of two sides of a triangle for which you want a corresponding angle (in radians). The ratio must be a value between -1 and 1.</param>
            <returns>Double. Returns the arcsine of n. </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.ATan(Sybase.PowerBuilder.PBDouble)">
            <summary>
            Calculates the arctangent of an angle.
            </summary>
            <param name="v">The ratio of the lengths of two sides of a triangle for which you want a corresponding angle (in radians)</param>
            <returns>Double. Returns the arctangent of n. </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Ceiling(Sybase.PowerBuilder.PBDouble)">
            <summary>
            Determines the smallest whole number that is greater than or equal to a specified limit.
            </summary>
            <param name="v">The number for which you want the smallest whole number that is greater than or equal to it</param>
            <returns>The datatype of n. Returns the smallest whole number that is greater than or equal to n. If n is null, Ceiling returns null. </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Cos(Sybase.PowerBuilder.PBDouble)">
            <summary>
            Calculates the cosine of an angle.
            </summary>
            <param name="v">The angle (in radians) for which you want the cosine</param>
            <returns>Double. Returns the cosine of n. If n is null, Cos returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Exp(Sybase.PowerBuilder.PBDouble)">
            <summary>
            Raises e to the specified power.
            </summary>
            <param name="v">The power to which you want to raise e (2.71828)</param>
            <returns>Double. Returns e raised to the power n. If n is null, Exp returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Fact(Sybase.PowerBuilder.PBDouble)">
            <summary>
            Determines the factorial of a number.
            </summary>
            <param name="v">The number for which you want the factorial</param>
            <returns>Double. Returns the factorial of n. If n is null, Fact returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Log(Sybase.PowerBuilder.PBDouble)">
            <summary>
            Determines the natural logarithm of a number.
            </summary>
            <param name="v">The number for which you want the natural logarithm (base e). The value of n must be greater than 0.</param>
            <returns>Double. Returns the natural logarithm of n. An execution error occurs if n is negative or zero. If n is null, Log returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.LogTen(Sybase.PowerBuilder.PBDouble)">
            <summary>
            Determines the base 10 logarithm of a number.
            </summary>
            <param name="v">The number for which you want the base 10 logarithm. The value of n must not be negative.</param>
            <returns>Double. Returns the base 10 logarithm of n. An execution error occurs if n is negative. If n is null, LogTen returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Max(Sybase.PowerBuilder.PBDouble,Sybase.PowerBuilder.PBDouble)">
            <summary>
            Determines the larger of two numbers.
            </summary>
            <param name="x">The number to which you want to compare y</param>
            <param name="y">The number to which you want to compare x</param>
            <returns>The datatype of x or y, whichever datatype is more precise. If any argument's value is null, Max returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Min(Sybase.PowerBuilder.PBDouble,Sybase.PowerBuilder.PBDouble)">
            <summary>
            Determines the smaller of two numbers.
            </summary>
            <param name="x">The number to which you want to compare y</param>
            <param name="y">The number to which you want to compare x</param>
            <returns>The datatype of x or y, whichever datatype is more precise. If any argument's value is null, Min returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Mod(Sybase.PowerBuilder.PBDouble,Sybase.PowerBuilder.PBDouble)">
            <summary>
            Obtains the remainder (modulus) of a division operation.
            </summary>
            <param name="x">The number you want to divide by y</param>
            <param name="y">The number you want to divide into x</param>
            <returns>The datatype of x or y, whichever datatype is more precise. If any argument's value is null, Mod returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Pi(Sybase.PowerBuilder.PBDouble)">
            <summary>
            Multiplies pi by a specified number.
            </summary>
            <param name="v">The number you want to multiply by pi (3.14159265358979323...)</param>
            <returns>Double. Returns the result of multiplying n by pi if it succeeds and -1 if an error occurs. If n is null, Pi returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Rand(Sybase.PowerBuilder.PBLong)">
            <summary>
            Obtains a random whole number between 1 and a specified upper limit.
            </summary>
            <param name="m">The upper limit of the range of random numbers you want returned. The lower limit is always 1. The upper limit is 32,767.</param>
            <returns>A numeric datatype, the datatype of n. Returns a random whole number between 1 and n inclusive. If n is null, Rand returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Randomize(Sybase.PowerBuilder.PBLong)">
            <summary>
            Initializes the random number generator so that the Rand function begins a new series of pseudorandom numbers.
            </summary>
            <param name="s">The starting value (seed) for the random number generator. When n is 0, PowerBuilder takes the seed from the system clock and begins a nonrepeatable sequence. A nonzero number generates a different but repeatable sequence for each seed value. n cannot exceed 32,767.</param>
            <returns>Integer. If n is null, Randomize returns null. The return value is never used.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Round(Sybase.PowerBuilder.PBDecimal,Sybase.PowerBuilder.PBInt)">
            <summary>
            Rounds a number to the specified number of decimal places.
            </summary>
            <param name="v">The number you want to round.</param>
            <param name="p">The number of decimal places to which you want to round x. Valid values are 0 through 30.</param>
            <returns>Decimal. Returns x rounded to the specified number of decimal places if it succeeds, and null if it fails or if any argument's value is null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Sign(Sybase.PowerBuilder.PBDouble)">
            <summary>
            Reports whether a number is negative, zero, or positive.
            </summary>
            <param name="v">The number for which you want to find out the sign</param>
            <returns>Integer. Returns a number (-1, 0, or 1) indicating the sign of n. If n is null, Sign returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Sin(Sybase.PowerBuilder.PBDouble)">
            <summary>
            Calculates the sine of an angle.
            </summary>
            <param name="v">The angle (in radians) for which you want the sine</param>
            <returns>Double. Returns the sine of n. If n is null, Sin returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Sqrt(Sybase.PowerBuilder.PBDouble)">
            <summary>
            Calculates the square root of a number.
            </summary>
            <param name="v">The number for which you want the square root</param>
            <returns>Double. Returns the square root of n. If n is null, Sqrt returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Tan(Sybase.PowerBuilder.PBDouble)">
            <summary>
            Calculates the tangent of an angle.
            </summary>
            <param name="v">The angle (in radians) for which you want the tangent</param>
            <returns>Double. Returns the tangent of n. An execution error occurs if n is not valid. If n is null, Tan returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Truncate(Sybase.PowerBuilder.PBDecimal,Sybase.PowerBuilder.PBInt)">
            <summary>
            Truncates a number to the specified number of decimal places.
            </summary>
            <param name="v">The number you want to truncate.</param>
            <param name="p">The number of decimal places to which you want to truncate x. Valid values are 0 through 28.</param>
            <returns>Decimal. Returns the result of the truncation if it succeeds and null if it fails or if any argument is null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Blob(Sybase.PowerBuilder.PBAny)">
            <summary>
            Converts a string or an array of bytes to a blob datatype.
            </summary>
            <param name="StringOrByteArray">An Any variable that holds a string or an array of bytes you want to convert to a blob datatype</param>
            <returns>Blob. Returns the converted string or byte array in a blob.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Blob(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBEncodingValue)">
            <summary>
            Converts a string to a blob datatype.
            </summary>
            <param name="s">The string you want to convert to a blob datatype</param>
            <param name="e">Character encoding of the resulting blob. Values are:
            ?EncodingANSI!
            ?EncodingUTF8!
            ?EncodingUTF16LE! (default)
            ?EncodingUTF16BE!</param>
            <returns>Blob. Returns the converted string in a blob with the requested encoding, if specified. If text is null, Blob returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.BlobEdit(Sybase.PowerBuilder.PBBlob@,Sybase.PowerBuilder.PBULong,Sybase.PowerBuilder.PBAny)">
             <summary>
             Inserts data of any PowerBuilder datatype into a blob variable.
             </summary>
             <param name="b">An initialized variable of the blob datatype into which you want to copy a standard PowerBuilder datatype</param>
             <param name="o">The number (1 to 4,294,967,295) of the position in blobvariable at which you want to begin copying the data</param>
             <param name="v">Data of a valid PowerBuilder datatype that you want to copy into blobvariable</param>
             <returns>Unsigned long. Returns the position at which the next data can be copied if it succeeds, and returns null if there is not enough space in blobvariable to copy the data. If any argument's value is null, BlobEdit returns null.
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.BlobEdit(Sybase.PowerBuilder.PBBlob@,Sybase.PowerBuilder.PBULong,Sybase.PowerBuilder.PBAny,Sybase.PowerBuilder.PBEncodingValue)">
             <summary>
             Inserts data of any PowerBuilder datatype into a blob variable.
             </summary>
             <param name="b">An initialized variable of the blob datatype into which you want to copy a standard PowerBuilder datatype</param>
             <param name="o">The number (1 to 4,294,967,295) of the position in blobvariable at which you want to begin copying the data</param>
             <param name="v">Data of a valid PowerBuilder datatype that you want to copy into blobvariable</param>
             <param name="e">Character encoding of the resulting blob. Values are:
             ?EncodingANSI!
             ?EncodingUTF8!
             ?EncodingUTF16LE! (default)
             ?EncodingUTF16BE!</param>
             <returns>Unsigned long. Returns the position at which the next data can be copied if it succeeds, and returns null if there is not enough space in blobvariable to copy the data. If any argument's value is null, BlobEdit returns null.
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.BlobMid(Sybase.PowerBuilder.PBBlob,Sybase.PowerBuilder.PBULong)">
             <summary>
             Extracts data from a blob variable.
             </summary>
             <param name="b">Data of the blob datatype</param>
             <param name="o">The number (1 to 4,294,967,295) of the first byte you want returned</param>
             <returns>Blob. Returns length bytes from data starting at byte n. If n is greater than the number of bytes in data, BlobMid returns an empty blob. If together length and n add up to more bytes than the blob contains, BlobMid returns the remaining bytes, and the returned blob will be shorter than the specified length. If any argument's value is null, BlobMid returns null.
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.BlobMid(Sybase.PowerBuilder.PBBlob,Sybase.PowerBuilder.PBULong,Sybase.PowerBuilder.PBULong)">
             <summary>
             Extracts data from a blob variable.
             </summary>
             <param name="b">Data of the blob datatype</param>
             <param name="o">The number (1 to 4,294,967,295) of the first byte you want returned</param>
             <param name="c">The number of bytes (1 to 4,294,967,295) you want returned</param>
             <returns>Blob. Returns length bytes from data starting at byte n. If n is greater than the number of bytes in data, BlobMid returns an empty blob. If together length and n add up to more bytes than the blob contains, BlobMid returns the remaining bytes, and the returned blob will be shorter than the specified length. If any argument's value is null, BlobMid returns null.
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.Len(Sybase.PowerBuilder.PBBlob)">
            <summary>
            Reports the length of a string or a blob. 
            </summary>
            <param name="b">The string or blob for which you want the length in number of characters or in number of bytes</param>
            <returns>Long. Returns a long whose value is the length of stringorblob if it succeeds and -1 if an error occurs. If stringorblob is null, Len returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.LenW(Sybase.PowerBuilder.PBBlob)">
            <summary>
            Reports the length of a string or a blob. This function is obsolete. It has the same behavior as Len in all environments.
            </summary>
            <param name="b">The string or blob for which you want the length in number of characters or in number of bytes</param>
            <returns>Long. Returns a long whose value is the length of stringorblob if it succeeds and -1 if an error occurs. If stringorblob is null, Len returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.SetByte(Sybase.PowerBuilder.PBBlob@,Sybase.PowerBuilder.PBULong,Sybase.PowerBuilder.PBByte)">
             <summary>
             Sets data of type Byte for a blob variable.
             </summary>
             <param name="b">A variable of the Blob datatype in which you want to insert a value of the Byte datatype </param>
             <param name="o">Tthe number of the position in blobvariable at which you want to insert a value of the Byte datatype</param>
             <param name="v">Data of the Byte datatype that you want to set into blobvariable at position n.
            </param>
             <returns>Integer. Returns 1 if it succeeds or -1 if n exceeds the scope of blobvariable; it returns null if the value of any of its arguments is null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.GetByte(Sybase.PowerBuilder.PBBlob,Sybase.PowerBuilder.PBULong,Sybase.PowerBuilder.PBByte@)">
            <summary>
            Extracts data of type Byte from a blob variable.
            </summary>
            <param name="b">A variable of the Blob datatype from which you want to extract a value of the Byte datatype </param>
            <param name="o">Tthe number of the position in blobvariable at which you want to retrieve a value of the Byte datatype </param>
            <param name="v">Variable of the Byte datatype in which you want to store the returned data of type Byte</param>
            <returns>Integer. Returns 1 if it succeeds or -1 if n exceeds the scope of blobvariable; it returns null if the value of any of its arguments is null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.GetByteArray(Sybase.PowerBuilder.PBBlob)">
            <summary>
            Obtains an array of Byte values stored in a blob.
            </summary>
            <param name="input">A Blob datatype that you want to return as an array of bytes. </param>
            <returns>Any. Returns the value of the input variable as an array of Byte datatypes if it succeeds; it returns 0 if the input variable is not a valid blob.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.IsNull(Sybase.PowerBuilder.PBAny)">
            <summary>
            Reports whether the value of a variable or expression is null.
            </summary>
            <param name="v">A variable or expression that you want to test to determine whether its value is null</param>
            <returns>Boolean. Returns true if any is null and false if it is not. </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.SetNull(Sybase.PowerBuilder.PBAny@)">
            <summary>
            Sets a variable to null. The variable can be any datatype except for a structure or autoinstantiated object. 
            </summary>
            <param name="v">The variable you want to set to null</param>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, SetNull returns null.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.SharedObjectDirectory(Sybase.PowerBuilder.PBArray@)">
             <summary>
             Retrieves the list of objects that have been registered for sharing. 
             </summary>
             <param name="InstanceNames">An unbounded array of type string in which you want to store the names of objects that have been registered for sharing</param>
             <returns>ErrorReturn. Returns one of the following values:
            ·	Success! - The function succeeded
            ·	FeatureNotSupportedError! - This function is not supported on this platform
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.SharedObjectDirectory(Sybase.PowerBuilder.PBArray@,Sybase.PowerBuilder.PBArray@)">
             <summary>
             Retrieves the list of objects that have been registered for sharing.
             </summary>
             <param name="InstanceNames">An unbounded array of type string in which you want to store the names of objects that have been registered for sharing</param>
             <param name="ClassNames">An unbounded array of type string in which you want to store the class names of objects registered for sharing</param>
             <returns>ErrorReturn. Returns one of the following values:
            ·	Success! - The function succeeded
            ·	FeatureNotSupportedError! - This function is not supported on this platform
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.SharedObjectGet``1(Sybase.PowerBuilder.PBString,``0@)">
             <summary>
             Gets a reference to a shared object instance.
             </summary>
             <typeparam name="T1"></typeparam>
             <param name="instanceName">The name of a shared object instance to which you want to obtain references. The name you specify must match the name given to the object instance when it was first registered with the SharedObjectRegister function.</param>
             <param name="objectInstance">An object variable of type PowerObject in which you want to store an instance of a shared object.</param>
             <returns>ErrorReturn. Returns one of the following values:
            ·	Success! - The function succeeded
            ·	SharedObjectCreateInstanceError! - The local reference to the shared object could not be created
            ·	SharedObjectNotExistsError! - The instance name has not been registered
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.SharedObjectRegister(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBString)">
             <summary>
             Registers a user object so that it can be shared. 
             </summary>
             <param name="className">The name of the user object that you want to share</param>
             <param name="instanceName">A string whose value is the name you want to assign to the shared object instance</param>
             <returns> ErrorReturn. Returns one of the following values:
            ·	Success! - The function succeeded
            ·	SharedObjectExistsError! - The instance name has already been used
            ·	SharedObjectCreateInstanceError! - The object could not be created
            ·	SharedObjectCreatePBSessionError! - The shared object session could not be created
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSystemFunctions.SharedObjectUnregister(Sybase.PowerBuilder.PBString)">
             <summary>
             Unregisters a user object that was previously registered.
             </summary>
             <param name="instanceName">The name assigned to the shared object instance when it was first registered</param>
             <returns> ErrorReturn. Returns one of the following values:
            ·	Success! - The function succeeded
            ·	SharedObjectNotExistsError! - The instance name has not been registered
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBContextInformation.GetCompanyName(Sybase.PowerBuilder.PBString@)">
            <summary>
            Returns the company name for the current execution context
            </summary>
            <param name="CoName"></param>
            <returns>Integer. Returns 1 if the function succeeds and -1 if an 
            error occurs</returns>
        </member>
        <member name="T:Sybase.PowerBuilder.PBNI.IPBProxy">
            <summary>
            All proxy classes should implement this interface
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.DSI.PBSQL.ObProtoArgType">
            <summary>
            object prototype argument type
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.ObProtoArgType.OB_ARG_VAL">
            <summary>
            ob arg value type
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.ObProtoArgType.OB_ARG_REF">
            <summary>
            ob arg reference type
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.ObProtoArgType.OB_ARG_VARLIST">
            <summary>
            ob arg variable list type
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.ObProtoArgType.OB_ARG_READONLY">
            <summary>
            ob arg readonly type
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationType">
            <summary>
            database declaration type
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationType.RTDB_CURSOR">
            <summary>
            curson type
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationType.RTDB_EITHER">
            <summary>
            cursor or procedure type
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationType.RTDB_PROCEDURE">
            <summary>
            procedure type
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.DSI.PBSQL.DBFetchDirection">
            <summary>
            fetch direction
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBFetchDirection.RTDB_FETCH_NEXT">
            <summary>
            fetch next
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBFetchDirection.RTDB_FETCH_FIRST">
            <summary>
            fetch first
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBFetchDirection.RTDB_FETCH_PRIOR">
            <summary>
            fetch prior
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBFetchDirection.RTDB_FETCH_LAST">
            <summary>
            fetch last
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.DSI.PBSQL.DBI_PARMSTYLE">
            <summary>
            parameter style
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBI_PARMSTYLE.DBI_PARMSTYLE_NOTSUPPORTED">
            <summary>
            parameter style not support
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBI_PARMSTYLE.DBI_PARMSTYLE_COLON">
            <summary>
            colun parameter style
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBI_PARMSTYLE.DBI_PARMSTYLE_QUESTIONMARK">
            <summary>
            question mark parameter sytle
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBI_PARMSTYLE.DBI_PARMSTYLE_NAMED">
            <summary>
            named parameter style
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.DSI.PBSQL.RTDBError">
            <summary>
            runtime dtabase error
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErrNULL">
            <summary>
            runtime database error null
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErr001">
            <summary>
            runtime database error 1
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErr002">
            <summary>
            runtime database error 2
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErr003">
            <summary>
            runtime database error 3
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErr004">
            <summary>
            runtime database error 4
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErr005">
            <summary>
            runtime database error 5
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErr006">
            <summary>
            runtime database error 6
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErr007">
            <summary>
            runtime database error 7
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErr008">
            <summary>
            runtime database error 8
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErr009">
            <summary>
            runtime database error 9
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErr010">
            <summary>
            runtime database error 10
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErr011">
            <summary>
            runtime database error 11
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErr012">
            <summary>
            runtime database error 12
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErr013">
            <summary>
            runtime database error 13
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErr014">
            <summary>
            runtime database error 14
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErr015">
            <summary>
            runtime database error 15
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErr016">
            <summary>
            runtime database error 16
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErr017">
            <summary>
            runtime database error 17
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErr018">
            <summary>
            runtime database error 18
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.RTDBError.RTDBErrEVENT">
            <summary>
            runtime database error event
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction">
            <summary>
            database transaction define
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.autoCommit">
            <summary>
            Auto commit flag
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.currentOfCursorWorks">
            <summary>
            Current of cursor flag
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.parseOnly">
            <summary>
            Parse only flag
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.specialCurrentOfCursor">
            <summary>
            Special current of cursor flag
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.clikeNullStringDefault">
            <summary>
            Null string default
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.commandBlock">
            <summary>
            Current command block
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.statementList">
            <summary>
            Statement list
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.skipSelectCountVerify">
            <summary>
            Skip select count verify
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.describeBeforeExecute">
            <summary>
            Describe before execute
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.passedTransaction">
            <summary>
            Transaction got passed to us
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.useBindVariables">
            <summary>
            should we use input bind variables
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.dbiInputBind">
            <summary>
            dbi input bind ,no use in dbi
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.isdb2DoubleQuote">
            <summary>
            to support DB2 double quote
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.dsiCurrentCommand">
            <summary>
            pointer to current dsi command
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.runtimeCode">
            <summary>
            sql command runtime code
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.returnCode">
            <summary>
            sql command return code
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.returnText">
            <summary>
            sql command return text
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.returnValue">
            <summary>
            sql command return value
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.AutoCommit">
            <summary>
             Gets or sets a value indicating whether auto commit
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.CurrentOfCursorWorks">
            <summary>
            Gets or sets a value indicating whether current of cursorworks
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.ParseOnly">
            <summary>
            Gets or sets a value indicating whether parseonly
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.SpecialCurrentOfCursor">
            <summary>
            Gets or sets a value indicating whether special current of cursor
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.CNullStringDefault">
            <summary>
              Gets or sets cnullstringdefault value
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.CommandBlock">
            <summary>
              Gets or sets command block value
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.StatementList">
            <summary>
              Gets or sets statement list
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.SkipSelectCountVerify">
            <summary>
            Gets or sets a value indicating whether skipSelectCountVerify
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.DescribeBeforeExecute">
            <summary>
            Gets or sets a value indicating whether describeBeforeExecute
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.PassedTransaction">
            <summary>
            Gets or sets a value indicating whether passedTransaction
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.UseBindVariables">
            <summary>
              Gets or sets useBindVariables
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.DBIInputBind">
            <summary>
              Gets or sets dbi input bind
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.DB2DoubleQuote">
            <summary>
            Gets or sets a value indicating whether db2DoubleQuote
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.DSICurrentCommand">
            <summary>
              Gets or sets dsiCurrentCommand
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.RuntimeCode">
            <summary>
              Gets or sets runtimeCode
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.ReturnCode">
            <summary>
              Gets or sets returnCode
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.ReturnValue">
            <summary>
              Gets or sets returnValue
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransaction.ReturnText">
            <summary>
              Gets or sets returnText
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.DSI.PBSQL.DBPooledTransaction">
            <summary>
            database pooled transaction define
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBPooledTransaction.commandBlock">
            <summary>
            command block varaible
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBPooledTransaction.lastConnectTimeTicker">
            <summary>
            last connect time
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBPooledTransaction.transInUse">
            <summary>
            DB command block is in use
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBPooledTransaction.origUserID">
            <summary>
            original user id
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBPooledTransaction.CommandBlock">
            <summary>
             Gets or sets command block
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBPooledTransaction.LastConnectTimeTicker">
            <summary>
             Gets or sets last connect time
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBPooledTransaction.TransInUse">
            <summary>
             Gets or sets a value indicating whether transaction is in use
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBPooledTransaction.OrigUserID">
            <summary>
             Gets or sets original user id
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.PBApplication">
            <summary>
            Summary description for Application.
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.PBApplication.Halt(System.Boolean)">
            <summary>
            This function will be called by the generated code.
            </summary>
            <param name="close"></param>
        </member>
        <member name="E:Sybase.PowerBuilder.PBApplication.ToolbarSettingsChanged">
            <summary>
            Fires while settings for toolbar changed to make a chance for toolbar to apply the changement.
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.PBTransactionServer">
            <summary>
            Here we suppose PB.NET not running as component at all
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.PBTransactionServer.Which">
            <summary>
            Allows a component to find out whether it is running on a transaction server.
            </summary>
            <returns>Integer. Returns 0 if the object is not running on a transaction 
            server, 1 if it is running on EAServer, or 2 if it is running on COM+</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBTransactionServer.SetComplete">
            <summary>
            Declares that the transaction in which a component is participating should be 
            committed and the component instance should be deactivated
            </summary>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBTransactionServer.SetAbort">
            <summary>
            Declares that a component cannot complete its work for the current transaction 
            and that the transaction should be rolled back. The component instance are 
            deactivated when the method returns
            </summary>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBTransactionServer.EnableCommit">
            <summary>
            Declares that a component's work may be incomplete but its transaction updates 
            are consistent and can be committed
            </summary>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBTransactionServer.DisableCommit">
            <summary>
            Declares that a component's transaction updates are inconsistent and cannot be 
            committed in their present state
            </summary>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBTransactionServer.IsInTransaction">
            <summary>
            Indicates whether a component is executing in a transaction
            </summary>
            <returns>Boolean. Returns true if the component is executing as part of a 
            transaction and false if it is not</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBTransactionServer.IsTransactionAborted">
            <summary>
            Determines whether the current transaction, in which an EAServer component 
            participates, has been aborted
            </summary>
            <returns>Boolean. Returns true if the current transaction has been aborted 
            and false if it has not.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBTransactionServer.IsCallerInRole(Sybase.PowerBuilder.PBString)">
            <summary>
            Indicates whether the direct caller of a COM object running on COM+ is in 
            a specified role (either individually or as part of a group)
            </summary>
            <param name="RoleName"></param>
            <returns>Boolean. Returns true if the direct caller is in the specified role 
            and false if it is not</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBTransactionServer.IsSecurityEnabled">
            <summary>
            Indicates whether or not security checking is enabled for a COM object 
            running on COM+.
            </summary>
            <returns>Boolean. Returns true if security checking is enabled and false 
            if it is not</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBTransactionServer.ImpersonateClient">
            <summary>
            Allows a COM object running on COM+ to take on the security attributes of 
            the client for the duration of a call
            </summary>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBTransactionServer.RevertToSelf">
            <summary>
            Restores the security attributes for a COM object that is running on COM+ 
            and impersonating the client
            </summary>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBTransactionServer.IsImpersonating">
            <summary>
            Queries whether a COM object running on COM+ is impersonating the client
            </summary>
            <returns>Boolean. Returns true if the component is impersonating the client and 
            false if it is not.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBTransactionServer.CreateInstance``1(``0@,Sybase.PowerBuilder.PBString)">
            <summary>
            Creates an instance of a component running on the current EAServer or COM+ server. 
            This function is called from within a component instance running on EAServer or COM+
            </summary>
            <param name="oResult"></param>
            <param name="ComponentId"></param>
            <returns>Long. Returns 0 if it succeeds and one of the following values if an error 
            occurs:
            50  Distributed service error</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBTransactionServer.Lookup``1(``0@)">
            <summary>
            Allows a PowerBuilder client or component to obtain the factory interface of an EAServer 
            component in order to create an instance of the component
            </summary>
            <param name="newRemoteObject"></param>
            <returns>Long. Returns 0 if it succeeds and a negative number if an error occurs</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBNI.PBExtension.LoadClass(Sybase.PowerBuilder.IPBSession,System.Type,System.String,System.Boolean)">
            <summary>
            Load a native class exposed by a PB extension
            </summary>
            <param name="session">The current session</param>
            <param name="type">The type that represents the native class.</param>
            <param name="nativeClassName">The name of the native class.</param>
            <param name="isNVO">A flag indicating if the class is a non-visual class.</param>
            <returns>The object representing the native class.</returns>
        </member>
        <member name="T:Sybase.PowerBuilder.DSI.PBSQL.SQLRuntimeReturnVal">
            <summary>
            sql runtime return code.
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.SQLRuntimeReturnVal.DSISQLOK">
            <summary>
            sql execute ok
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.SQLRuntimeReturnVal.DSINOTFOUND">
            <summary>
            Row not found 
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.SQLRuntimeReturnVal.DSISQLERROR">
            <summary>
            Error has occurred
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.SQLRuntimeReturnVal.DSISQLPREVIEWERROR">
            <summary>
            SQL preview error
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.PBMenuAppearance">
            <summary>
            Represent the properties for the apprearance of the menu bar.
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.DSI.PBSQL.DBStatementIndirect">
            <summary>
            database statement indirect
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBStatementIndirect.padding">
            <summary>
            padding field
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBStatementIndirect.Padding">
            <summary>
             Gets or sets padding value
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.IPBResultSet">
            <summary>
            The row and column index is of 1 based
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.DataTableResultSet.Sybase#PowerBuilder#IPBResultSet#GetColumnDefinition(System.Int32,System.String@,System.String@,Sybase.PowerBuilder.PBParmType@,System.Int32@,System.Int32@)">
            <summary>
            
            </summary>
            <param name="colIndex"></param>
            <param name="name"></param>
            <param name="label"></param>
            <param name="type"></param>
            <param name="width"></param>
            <param name="flag"></param>
            <returns>int. Return 0 if succeeded and -1 if failed</returns>
        </member>
        <member name="T:Sybase.PowerBuilder.PBGraphHelper">
            <summary>
            Helpler for implementing class Sybase.PowerBuilder.Web.PBGraph and Sybase.PowerBuilder.Win.PBGraph
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.DSI.PBSQL.DBTransactionPool">
            <summary>
            database transaction pool define
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransactionPool.maxConnections">
            <summary>
            max connection number
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransactionPool.minConnections">
            <summary>
            min connection number
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransactionPool.timeout">
            <summary>
            time out value
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransactionPool.waitFail">
            <summary>
            wait fail value
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransactionPool.handlePoolSemaphore">
            <summary>
            pool semaphonre handle
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBTransactionPool.transactions">
            <summary>
            transaction array
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransactionPool.MaxConnections">
            <summary>
              Gets or sets max connections
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransactionPool.MinConnections">
            <summary>
              Gets or sets min connections
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransactionPool.TimeOut">
            <summary>
              Gets or sets timeout
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransactionPool.WaitFail">
            <summary>
              Gets or sets wait fail value
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransactionPool.HandlePoolSemaphore">
            <summary>
              Gets or sets pool semaphore handle
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBTransactionPool.Transactions">
            <summary>
              Gets or sets transactions
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.PBErrorLogging">
            <summary>
            In PB.NET, the log info will be tried to write to the system event log
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.SharedObject">
            <summary>
            In PB, each shared object is isolated and running in a standalone session.
            Each shared object will reside in a separated app domain.
            And the registered shared object is un-reentrant, so all the others invokes
            could not be executed until the current one finished.
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.SharedObject.Directory(Sybase.PowerBuilder.PBArray@)">
            <summary>
            Retrieves the list of objects that have been registered for sharing
            
            Use this function to obtain a list of objects that have been registered for sharing
            </summary>
            <param name="InstanceNames"></param>
            <returns>ErrorReturn. Returns one of the following values:
            ?Success! ?The function succeeded
            ?FeatureNotSupportedError! ?This function is not supported on this platform
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.SharedObject.Get``1(Sybase.PowerBuilder.PBString,``0@)">
            <summary>
            Gets a reference to a shared object instance.
            
            SharedObjectGet retrieves a reference to an object that was created with SharedObjectRegister. 
            You can use a shared object on a PowerBuilder client to simulate an asynchronous call to 
            EAServer. The main thread on the client makes an asynchronous call to a function on the shared 
            object, passing it a callback object that is notified when processing has finished on the 
            server. The method on the shared object makes a synchronous call to the EAServer component 
            method that performs processing. Since the shared object is running in a separate thread on 
            the client, the main thread on the client can proceed with other work while the process runs 
            on the server.
            </summary>
            <param name="instanceName"></param>
            <param name="objectInstance"></param>
            <returns>ErrorReturn. Returns one of the following values:
            ?Success! ?The function succeeded
            ?SharedObjectCreateInstanceError! ?The local reference to the shared object could 
            not be created
            ?SharedObjectNotExistsError! ?The instance name has not been registered
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.SharedObject.Register(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBString)">
            <summary>
            Registers a user object so that it can be shared.
            
            When you call the SharedObjectRegister function, PowerBuilder opens a separate runtime session 
            for the shared object and creates the shared object. The name you specify for the object instance 
            provides a way for you to access the object instance with the SharedObjectGet function. 
            You can use a shared object on a PowerBuilder client to simulate an asynchronous call to EAServer. 
            For more information, see the description of the SharedObjectGet function.
            </summary>
            <param name="className"></param>
            <param name="instanceName"></param>
            <returns>ErrorReturn. Returns one of the following values:
            ?Success! ?The function succeeded
            ?SharedObjectExistsError! ?The instance name has already been used
            ?SharedObjectCreateInstanceError! ?The object could not be created
            ?SharedObjectCreatePBSessionError! ?The shared object session could not be created
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.SharedObject.Unregister(Sybase.PowerBuilder.PBString)">
            <summary>
            Unregisters a user object that was previously registered
            
            This function marks a shared object for destruction. But the object is not actually destroyed 
            until there are no more references to the object.
            You can use a shared object on a PowerBuilder client to simulate an asynchronous call to EAServer. 
            For more information, see the description of the SharedObjectGet function.
            </summary>
            <param name="instanceName"></param>
            <returns>ErrorReturn. Returns one of the following values:
            ?Success! ?The function succeeded
            ?SharedObjectNotExistsError! ?The instance name has not been registered
            </returns>
        </member>
        <member name="T:Sybase.PowerBuilder.PBLibHelper">
            <summary>
            Summary description for PBLibHelper.
            </summary>
        </member>
        <member name="T:Win32.User.INITCOMMONCONTROLSEX">
            <summary>
            Carries information used to load common control classes from the 
            dynamic-link library (DLL). This structure is used with the 
            InitCommonControlsEx function. 
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil">
            <summary>
            SQLUtil class provide functions such as type convert, construct
            DSI instance or PBTYPE instance.
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.ConvertPBTYPE2DSITYPE(Sybase.PowerBuilder.PBDataType)">
            <summary>
            convert pb type to dsi type
            </summary>
            <param name="pbtype">pb type , which need to be converted to dsi type</param>
            <returns>dsi type , which is related to input pb data type</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.ConstructNullPBVALUE(Sybase.PowerBuilder.PBDataType)">
            <summary>
            return a null value for relative pb data type
            </summary>
            <param name="pbtype">pb data type</param>
            <returns>the ralative pb data type null value</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.ConvertDSIVALUE2PBVALUE(Sybase.PowerBuilder.PBDataType,System.Object)">
            <summary>
            convert dsi value to pb value
            </summary>
            <param name="pbtype">pb type , the output value type </param>
            <param name="value">dsi value , which need to be converted to pb variable</param>
            <returns>relative pb variable instance</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.GetDSIFetchDataType(Sybase.PowerBuilder.DataSource.DSDataType)">
            <summary>
            convert some special dsi datatype
            </summary>
            <param name="type">the old dsi datatype</param>
            <returns>the new dsi datatype</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.CreateDSFetchDataFromPBTYPE(Sybase.PowerBuilder.DataSource.DSDataType,System.Int32,Sybase.PowerBuilder.PBDataType,System.Int32)">
            <summary>
            create a dsi fetch data variable
            </summary>
            <param name="pbtype">pb data type</param>
            <returns>a dsi fetch data variable</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.CreateDSParameterFromPBTYPE(Sybase.PowerBuilder.PBDataType,System.Object)">
            <summary>
            create a dsi parameter variable instance
            </summary>
            <param name="pbtype">pb data type</param>
            <param name="value">pb variable , which need to be converted to dsi variable</param>
            <returns>dsi variable instance</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.CreateDSParameterArrayFromPBTYPE(Sybase.PowerBuilder.PBDataType,Sybase.PowerBuilder.PBArray,System.Int32@)">
            <summary>
            Create DSI parameter array from pb array
            </summary>
            <param name="pbtype">pb data type</param>
            <param name="value">pb array values</param>
            <returns>dsi parameter array</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.GetPlaceHolderLength(System.String)">
            <summary>
            get the first placeholder length
            </summary>
            <param name="syn">the sql command text</param>
            <returns>the placeholder length</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.SetCommandProcFlag(Sybase.PowerBuilder.DataSource.IDSCommand,System.String)">
            <summary>
            set command isproc flag
            </summary>
            <param name="cmd">currrent command</param>
            <param name="sql">the sql statement</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.BindSqlParms(Sybase.PowerBuilder.DataSource.IDSCommand,Sybase.PowerBuilder.DataSource.IDSConnection,System.String,Sybase.PowerBuilder.IPBValue[],System.Int32[],System.Boolean,System.Boolean)">
            <summary>
            bind parameter to sql command text
            </summary>
            <param name="cmd">current command</param>
            <param name="conn">current connection</param>
            <param name="sql">select command text</param>
            <param name="argsList">input arguments</param>
            <param name="argsOffset">input arguments position in sql commond text</param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.GenerateColumnName(System.String@,System.String@)">
            <summary>
            get first column from a statement 
            </summary>
            <param name="cmd">currrent statement</param>
            <param name="column">get the first column</param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.GenerateColumnNames(System.String,System.String[]@)">
            <summary>
            get every column from a statement
            </summary>
            <param name="cmd">current sql statement</param>
            <param name="columns">output columns</param>
            <returns>1 sucess,0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.GenerateTableName(System.String@)">
            <summary>
            get table name from the sql statement
            </summary>
            <param name="tablename">table name</param>
            <returns>1 success,0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.GenerateBlobSytax(System.String,System.String@,System.String[]@,System.String@)">
            <summary>
            generate blob syntax and other information.
            </summary>
            <param name="cmdText">select blob syntax</param>
            <param name="tablename">table name</param>
            <param name="columns">column name collection</param>
            <param name="syntax">blob syntax</param>
            <returns>1 success,0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.GenerateUpdateBlobSytax(System.String,System.String@,System.String@,System.String@)">
            <summary>
            generate update blob syntax
            </summary>
            <param name="cmdText">current sql statement</param>
            <param name="tablename">table name</param>
            <param name="column">column name</param>
            <param name="syntax">update syntax</param>
            <returns>1 success,0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.GetParameterCount(System.String,System.Int32[],System.Boolean)">
            <summary>
            Get parameter count from syntax
            </summary>
            <param name="syntax">sql syntax</param>
            <param name="offsetArray">offset array for every parameter</param>
            <param name="usedb2DoubleQuote">whether use double quote</param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.CursorProcRemoveAll(Sybase.PowerBuilder.DSI.PBSQL.DBTransaction)">
            <summary>
            Remove all cursor is related to the db transaction
            </summary>
            <param name="databaseTransaction">database transaction</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.CursorProcRemove(Sybase.PowerBuilder.DSI.PBSQL.DBTransaction,Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock)">
            <summary>
            remove a cursor .
            </summary>
            <param name="databaseTransaction">database transaction</param>
            <param name="block">the cursor need to be removed</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.CursorProcResolve(Sybase.PowerBuilder.DSI.PBSQL.DBTransaction,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.PBTransaction,System.Boolean,Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationType)">
            <summary>
            find the specified cursor
            </summary>
            <param name="databaseTransaction">database transaction</param>
            <param name="statement">statement variable</param>
            <param name="transaction">transaction variable</param>
            <param name="shouldExist">indicate whether the cursor should be exist</param>
            <param name="type">type variable </param>
            <returns>the specified cursor variable or null</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.CursorStaticAdd(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DSI.PBSQL.DBTransaction,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.PBTransaction,Sybase.PowerBuilder.IPBValue[],Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationType)">
            <summary>
            Statically add the cursor
            </summary>
            <param name="currentSession">current session</param>
            <param name="databaseTransaction">database transaction</param>
            <param name="statement">statement variable</param>
            <param name="transaction">transaction variable</param>
            <param name="inputValues">input values</param>
            <param name="type">type vaiable </param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.CursorDynamicAdd(Sybase.PowerBuilder.DSI.PBSQL.DBTransaction,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.PBTransaction,Sybase.PowerBuilder.PBDynamicStagingArea,Sybase.PowerBuilder.PBDynamicDescriptionArea,Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationType,System.Int32,Sybase.PowerBuilder.IPBValue[],System.Boolean)">
            <summary>
            Dynamically add cursor
            </summary>
            <param name="databaseTransaction">database transaction</param>
            <param name="statement">statement variable</param>
            <param name="transaction">transaction variable</param>
            <param name="sqlsa">sqlsa variable</param>
            <param name="sqlda">sqlda variable</param>
            <param name="type">type variable</param>
            <param name="numInputs">bind parameter count</param>
            <param name="inputValues">input values</param>
            <param name="executeProc">indicate whether is a procedure</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.CursorRetrieveResolve(Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock,Sybase.PowerBuilder.DSI.PBSQL.DBTransaction,Sybase.PowerBuilder.DataSource.IDSReader,Sybase.PowerBuilder.DataSource.IDSConnection,System.String)">
            <summary>
            Cursor retrieve function
            </summary>
            <param name="block">declaration variable</param>
            <param name="databaseTransaction">database transaction</param>
            <param name="reader">resultset variable</param>
            <param name="conn">connection variable</param>
            <param name="syntax">sql syntax </param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.GetDescriptorInput(Sybase.PowerBuilder.PBDynamicDescriptionArea,System.Int32)">
            <summary>
            get the input from sqlda
            </summary>
            <param name="sqlda">sqlda variable</param>
            <param name="numInputs">input numbers</param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.CheckFetchDirection(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DSI.PBSQL.DBFetchDirection,Sybase.PowerBuilder.DSI.PBSQL.DBTransaction)">
            <summary>
            check fetch direction
            </summary>
            <param name="currentSession">current session</param>
            <param name="fetchDirection">fetch direction</param>
            <param name="databaseTransaction">database transaction</param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.DescribeOutFromSQLDA(Sybase.PowerBuilder.PBDynamicDescriptionArea,Sybase.PowerBuilder.IPBValue[]@,Sybase.PowerBuilder.PBDataType[]@)">
            <summary>
            get output from sqlda
            </summary>
            <param name="sqlda">sqlda variable</param>
            <param name="outputValues">output values</param>
            <param name="outValueTypes">output value types</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.DescribeOutFromResult(Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock,Sybase.PowerBuilder.PBDynamicDescriptionArea,Sybase.PowerBuilder.IPBValue[]@,Sybase.PowerBuilder.PBDataType[]@)">
            <summary>
            get output from resultset
            </summary>
            <param name="block">declare variable</param>
            <param name="sqlda">sqlda variable</param>
            <param name="outputValues">output values</param>
            <param name="outValueTypes">output value types</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.DescribeOutFromBind(Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock,Sybase.PowerBuilder.PBDynamicDescriptionArea,Sybase.PowerBuilder.IPBValue[]@,Sybase.PowerBuilder.PBDataType[]@)">
            <summary>
            get output from bind
            </summary>
            <param name="block">declare variable</param>
            <param name="sqlda">sqlda variable</param>
            <param name="outputValues">output values</param>
            <param name="outValueTypes">output value types</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.FetchRun(Sybase.PowerBuilder.PBTransaction,Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock,Sybase.PowerBuilder.PBDataType[],Sybase.PowerBuilder.IPBValue[],Sybase.PowerBuilder.PBDynamicDescriptionArea,System.String,Sybase.PowerBuilder.DSI.PBSQL.DBFetchDirection)">
            <summary>
            Fetch the resultset
            </summary>
            <param name="transaction">current transaction</param>
            <param name="block">declare variable</param>
            <param name="outValueTypes">output value types</param>
            <param name="outputValues">output values</param>
            <param name="sqlda">sqlda variable</param>
            <param name="syntax">sql syntax</param>
            <returns>1 success, 0 no data, -1 exception occur.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.AssignDataToDescriptor(Sybase.PowerBuilder.PBDataType[],Sybase.PowerBuilder.IPBValue[],Sybase.PowerBuilder.PBDynamicDescriptionArea)">
            <summary>
            assign data to sqlda
            </summary>
            <param name="outValueTypes">output value types</param>
            <param name="outputValues">output values</param>
            <param name="sqlda">sqlda variable</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.DescribeOutput(Sybase.PowerBuilder.DataSource.IDSConnection,System.String,Sybase.PowerBuilder.PBDynamicDescriptionArea,System.Collections.Generic.List{Sybase.PowerBuilder.DataSource.DSRSSchema})">
            <summary>
            describe output to sqlda
            </summary>
            <param name="conn">connection variable</param>
            <param name="syntax">sql syntax</param>
            <param name="sqlda">sqlda variable</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.BuildRPCParamList(Sybase.PowerBuilder.PBSessionBase,System.String,Sybase.PowerBuilder.IPBValue[],System.Int32,Sybase.PowerBuilder.PBObProtoArg[],System.Boolean,Sybase.PowerBuilder.DataSource.IDSCommand)">
            <summary>
            Build RPC call parameters
            </summary>
            <param name="currentSession">current session</param>
            <param name="functionName">rpc function name</param>
            <param name="inputValues">input values</param>
            <param name="argNumber">arguments number</param>
            <param name="formalArglist">formal argument list</param>
            <param name="left2right">first parameter location</param>
            <param name="cmd">current command</param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.AssignValue(Sybase.PowerBuilder.PBObReturnArg@,System.Object)">
            <summary>
            assign return value
            </summary>
            <param name="retv">return value</param>
            <param name="v">real return value</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.RPCArgBackload(System.Collections.Generic.List{Sybase.PowerBuilder.DataSource.DSParameter},Sybase.PowerBuilder.IPBValue[],System.Int32,Sybase.PowerBuilder.PBObProtoArg[],System.Boolean)">
            <summary>
            get reference value from parameter
            </summary>
            <param name="parameters">rpc calling parameters</param>
            <param name="inputValues">input values</param>
            <param name="argNumber">input values number</param>
            <param name="formalArglist">formal argument list</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.SetErrorFields(Sybase.PowerBuilder.PBTransaction,System.Int64,System.Int64,System.Int64,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Set db function return code and other information
            </summary>
            <param name="transaction">current transaction</param>
            <param name="powerbuilderErrorCode">pb error code</param>
            <param name="vendorErrorCode">vender error code</param>
            <param name="numRows">the total number of rows</param>
            <param name="errorID">error id, indicate the specified error</param>
            <param name="errorParm">error information string</param>
            <param name="triggerEvent">whether trigger event</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.DatabaseError(Sybase.PowerBuilder.DataSource.IDSConnection,Sybase.PowerBuilder.DataSource.IDSCommand,Sybase.PowerBuilder.PBTransaction,System.Boolean,System.Int32,Sybase.PowerBuilder.DataSource.DSException)">
            <summary>
            set database error information
            </summary>
            <param name="conn">current connection</param>
            <param name="cmd">current command</param>
            <param name="transaction">current transaction</param>
            <param name="checkRows">the number of check rows</param>
            /// <param name="affectRows">the number of affected rows</param>
            <param name="e">the DSException instance</param>
            <returns>true ,success.false fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.DBSQLPreview(Sybase.PowerBuilder.PBTransaction,System.Int32,System.String)">
            <summary>
            call transaction preview event
            </summary>
            <param name="transaction">current transaction</param>
            <param name="sqlfunction">the specified sqlfunction</param>
            <param name="cmdText">sql command text</param>
            /// <returns>true, if sql preview is successful , false indicate fail.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.DBGetSQLFuncType(System.String)">
            <summary>
            according to cmd , get the sql function type
            </summary>
            <param name="cmd">current command</param>
            <returns>return sql function type</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.TransactionResolve(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.PBTransaction,System.Boolean)">
            <summary>
            get the index of transaction
            </summary>
            <param name="currentSession">current session</param>
            <param name="transaction">current transaction</param>
            <param name="shouldExist">whether should exist</param>
            <returns>the related index value</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.CreateDSIFetchData(System.Collections.Generic.List{Sybase.PowerBuilder.DataSource.DSFetchData}@,System.Collections.Generic.List{Sybase.PowerBuilder.DataSource.DSRSSchema},Sybase.PowerBuilder.PBDataType[])">
            <summary>
            get the dsi fetch datas
            </summary>
            <param name="datas">dsi fetch datas</param>
            <param name="schema">dsi schema data</param>
            <param name="outValueTypes">pb output type data</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.GetProcedureName(System.String,System.Int32@,System.Boolean,Sybase.PowerBuilder.DataSource.IDSCommand@)">
            <summary>
            get a procedure name
            </summary>
            <param name="sql">the procedure calling syntax</param>
            <param name="procParaStartPos">parameter start position in a procedure syntax</param>
            <returns>procedure name</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.GetArgValue(Sybase.PowerBuilder.IPBValue)">
            <summary>
            get argument value
            </summary>
            <param name="arg">the argument value object</param>
            <returns>the argument value string</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.GetArgValue4SpecialDataType(Sybase.PowerBuilder.IPBValue,Sybase.PowerBuilder.DataSource.IDSConnection@,System.String@)">
            <summary>
            get argument value for some special data type.
            </summary>
            <param name="argv">argument value</param>
            <param name="conn">the dsi connection object</param>
            <returns>the argument value</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.SetParameterDirection(System.String,System.Int32,Sybase.PowerBuilder.DataSource.DSParameter@,System.Boolean)">
            <summary>
            set parameter direction
            </summary>
            <param name="sqlcopy">the sql statement</param>
            <param name="argPos">argument position</param>
            <param name="p">the dsi parameter object</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.SetParameterName(System.Boolean,System.Int32,System.Int32,Sybase.PowerBuilder.DataSource.DSParmStyle,System.String,System.Int32@,Sybase.PowerBuilder.DataSource.IDSCommand@,System.String,Sybase.PowerBuilder.DataSource.DSParameter@)">
            <summary>
            set parameter name
            </summary>
            <param name="isADO">indicate whether the driver is ADO</param>
            <param name="argPos">argument position</param>
            <param name="argIndex">argument index</param>
            <param name="parmStyle">parameter style</param>
            <param name="mark">the parameter style format string</param>
            <param name="procParaStartPos">the current parameter start position</param>
            <param name="cmd">the command object</param>
            <param name="sql">the sql statement</param>
            <param name="p">the dsi parameter object</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.AdjustArgsOrSQL(System.Int32,System.Int32,System.String@,System.Int32,System.Int32,System.Int32,System.Int32[]@)">
            <summary>
            adjust sql or argument offset when insert argument value.
            </summary>
            <param name="argParmLength">argument value length after replacement</param>
            <param name="argLength">the argument value length before replacement</param>
            <param name="sql">sql statement</param>
            <param name="argIndex">argument index</param>
            <param name="argPos">argument position</param>
            <param name="argsListLength">argument list length</param>
            <param name="argsOffset">argument offset array</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLUtil.GetParmStyle(Sybase.PowerBuilder.DataSource.DSParmStyle,System.String@)">
            <summary>
            get parameter style format string
            </summary>
            <param name="parmStyle">parameter style</param>
            <param name="mark">parameter string format string</param>
        </member>
        <member name="T:Sybase.PowerBuilder.PBResultSet">
            <summary>
            This class is only a container of a reference to interface IDataStore.
            
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.PBAdoResultSet.SetRecordSet(Sybase.PowerBuilder.PBOleObject)">
            <summary>
            Sets an ADOResultSet object to obtain its data and metadata from a passed ADO Recordset.
            </summary>
            <param name="adoRecordSetObject"></param>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBAdoResultSet.GetRecordSet``1(``0@)">
            <summary>
            Returns the current ADO Recordset object.
            </summary>
            <param name="adoRecordSetObject"></param>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBAdoResultSet.SetResultSet(Sybase.PowerBuilder.PBResultSet)">
            <summary>
            Populates a new ADOResultSet object with data passed in a ResultSet object.
            </summary>
            <param name="source"></param>
            <returns>Integer. Returns 1 if it succeeds and -1 if an error occurs.</returns>
        </member>
        <member name="T:Sybase.PowerBuilder.ADOResultSet">
            <summary>
            There needs a encapsulation for the ADO Recordset here
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock">
            <summary>
            DB runtime cursor/procedure block
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.bindBuffer">
            <summary>
            Pointer to DB bind buffer
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.commandBlock">
            <summary>
             Current command block
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.numSelectItems">
            <summary>
            Number of select items
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.type">
            <summary>
            Type of block
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.name">
            <summary>
            Name of Proc/Cursor
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.timeStamp">
            <summary>
            Provides with pName a unique id
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.timeStamp2">
            <summary>
            Provides with pName a unique id
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.reader">
            <summary>
            resultset variable
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.dsiCommand">
            <summary>
            DSI command
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.schema">
            <summary>
            the schema
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.BindBuffer">
            <summary>
            Gets or sets bind buffer
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.CommandBlock">
            <summary>
             Gets or sets command block value
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.NumSelectItems">
            <summary>
             Gets or sets slect items value
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.Type">
            <summary>
             Gets or sets type value
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.Name">
            <summary>
             Gets or sets name value
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.TimeStamp">
            <summary>
             Gets or sets timestamp value
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.TimeStamp2">
            <summary>
             Gets or sets timestamp value
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.Reader">
            <summary>
             Gets or sets reader
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.DSICommand">
            <summary>
             Gets or sets dsi command
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.DSI.PBSQL.DBDeclarationBlock.Schema">
            <summary>
             Gets or sets schema
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.BackPrinting.PrintPendingJobBase">
            <summary>
            Summary description for PrintPendingJobBase.
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.BackPrinting.PrintPendingJobBase.UnitRatio_donNETtoPB">
            <summary>
            The PowerBuilder unit is in 1/1000 inches, and .NET unit is in 1/100 inches by default.
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.BackPrinting.PrintPendingJobBase.PBUnit2PixelRatio">
            <summary>
            The PowerBuilder unit is in 1/1000 inches, and pixel is in 72 dots inch
            </summary>
            <param name="pbunit"></param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.BackPrinting.PrintPendingJobBase.SetClipRegion(System.Drawing.Graphics)">
            <summary>
            Set the clip region on margins to prevent print out side margins
            </summary>
            <param name="g"></param>
        </member>
        <member name="M:Sybase.PowerBuilder.BackPrinting.PrintPendingJobBase.StartPrint">
            <summary>
            Start print and start a new page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.BackPrinting.PrintPendingJobBase.EndPrint">
            <summary>
            Finish the current page and print job
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.BackPrinting.PrintPendingJobBase.StartPage">
            <summary>
            Start a new page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.BackPrinting.PrintPendingJobBase.EndPage(System.Boolean)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.BackPrinting.PrintPendingJobBase.PrintImage(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="f"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="w"></param>
            <param name="h"></param>
            <returns>return true if succeeded</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.BackPrinting.PrintPendingJobBase.PrintImageObject(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Print the contents of a Image Object.
            </summary>
            <param name="image">The image obect which contents will be printed</param>
            <param name="x">The x coordinate on the page of the left corner of the object, in thousandths of an inch.</param>
            <param name="y">The y coordinate on the page of the left corner of the object, in thousandths of an inch.</param>
            <param name="w">Specifying the printed width of the object in thousandths of an inch. If omitted, PowerBuilder uses the object's original width.(optional)</param>
            <param name="h">Specifying the printed height of the object in thousandths of an inch. If omitted, PowerBuilder uses the object's original height.(optional)</param>
            <returns>return true if succeeded</returns>
        </member>
        <member name="T:Sybase.PowerBuilder.BackPrinting.PrintManagerBase">
            <summary>
            Summary description for PrintManagerBase.
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.BackPrinting.PrintManagerBase._pendingItems">
            <summary>
            Pending list is used to store the pending print job for each working PB 
            Session. It need not to beu synchronized since only one thread could 
            access it
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.PBOmObject.connectToRemoteObject(Sybase.PowerBuilder.PBString,Sybase.PowerBuilder.PBString)">
            <summary>
            Associates an OLE object with a PowerBuilder OLEObject variable and starts the server application.
            </summary>
            <param name="hostName">A string whose value is the name of the remote host where the COM server is located.</param>
            <param name="fileName">A string whose value is the name of an OLE storage file. You cannot specify an empty string. COM looks for filename on the local (client) machine. If filename is located on the remote host, its location must be made available to the local host by sharing. Use the share name for the remote drive to specify a file on a remote host ¡ª for example, \\hostname\shared_directory\test.ext.</param>
            <returns>Integer. Returns 0 if it succeeds and one of the following negative values if an error occurs:
            -1  Invalid call: the argument is the Object property of a control
            -2  Class name not found
            -3  Object could not be created
            -4  Could not connect to object
            -5  Could not connect to the currently active object
            -6  File name is invalid
            -7  File not found or could not be opened
            -8  Load from file not supported by server
            -9  Other error
            -10  Feature not supported on this platform
            -11  Server name is invalid
            -12  Server does not support operation
            -13  Access to remote host denied
            -14  Server unavailable
            -15  MTS is not loaded on this computer
            -16  Invalid Call: this function not applicable to OLETxnObject
            </returns>
            
        </member>
        <member name="T:Sybase.PowerBuilder.ParameterStyle">
            <summary>
            Used for indicating how a parameter should be passed. In PowerBuilder,
            a parameter can be passed in 3 ways: by value, by ref, or as read only.
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.PBArgument">
            <summary>
            Represents a argument passed to a method, including the value of the argument
            and how the argument is passed.
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.IRequest">
            <summary>
            The interface that represents a PowerBuilder request.
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.FunctionRequest">
            <summary>
            A Request object represents a posted method invocation.
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.EventRequest">
            <summary>
            Represents a post event invocation.
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.PBMethodQueue">
            <summary>
            The class is for holding the PBMethod posted.
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.PBMethodQueue.PostFunction(System.Object,System.String,Sybase.PowerBuilder.PBArgument[])">
            <summary>
            Add a request to an instance method to the queue.
            </summary>
            <param name="obj"></param>
            <param name="methodName"></param>
            <param name="args"></param>
        </member>
        <member name="M:Sybase.PowerBuilder.PBMethodQueue.PostFunction(System.Type,System.String,Sybase.PowerBuilder.PBArgument[])">
            <summary>
            Add a request to a static method to the queue.
            </summary>
            <param name="type"></param>
            <param name="methodName"></param>
            <param name="args"></param>
        </member>
        <member name="M:Sybase.PowerBuilder.PBMethodQueue.ExecuteOne">
            <summary>
            Execute one request.
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.PBMethodQueue.ExecuteAll">
            <summary>
            Execute all requests.
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.PBMethod">
            <summary>
            The PBMethod class is for calling a PB method dynamically,
            or calling a PB method by posting.
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.PBMethod.InvokeDynamic(Sybase.PowerBuilder.PBSessionBase,System.Object,System.String,Sybase.PowerBuilder.PBArgument[]@)">
            <summary>
            The is function is for calling a PB instance method dynamically.
            </summary>
            <param name="obj">The object on which the method is to be invoked.</param>
            <param name="methodName">The name of the method</param>
            <param name="args">The arguments to be passed to the method</param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBMethod.InvokeDynamic(Sybase.PowerBuilder.PBSessionBase,System.Object,System.String,Sybase.PowerBuilder.PBArgument[],System.Int32)">
            <summary>
            This method has the same prototype as above except we add a dummy 
            parameter.  Add this dummy parameter for we will not make the 3rd
            parameter as "ref".  This is required by pb2cs, please change it 
            carefull if you decide to change its prototype.
            </summary>
            <param name="session"></param>
            <param name="obj"></param>
            <param name="methodName"></param>
            <param name="args"></param>
            <param name="dummy"></param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBCalendarHelper.GetMonthsCount(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Get the count of months between two date.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="entirely">if true, only entire months are count in.</param>
            <returns></returns>
        </member>
        <member name="T:Sybase.PowerBuilder.DataTypeFormater">
            <summary>
            Summary description for DataTypeFormater.
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.DSI.PBSQL.PBDBNotificationHelper">
            <summary>
            handle db error and notification.
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.PBDBNotificationHelper.transaction">
            <summary>
            current db transaction
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.PBDBNotificationHelper.#ctor(Sybase.PowerBuilder.PBTransaction)">
            <summary>
            constructor , pass the transaction into.
            </summary>
            <param name="t">the current transaction</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.PBDBNotificationHelper.DBNotification(System.Object,Sybase.PowerBuilder.DataSource.DSEventArgs)">
            <summary>
            notification handler
            </summary>
            <param name="sender">the current connection</param>
            <param name="e">event variable</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.PBDBNotificationHelper.DBError(System.Object,Sybase.PowerBuilder.DataSource.DSEventArgs)">
            <summary>
            error handler
            </summary>
            <param name="sender">the current connection</param>
            <param name="e">event variable</param>
        </member>
        <member name="T:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc">
            <summary>
            This class calling DSI interface to finish SQL FUNCTION.
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.Start(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.PBTransaction,System.Boolean)">
            <summary>
            This function connect to database.
            </summary>
            <param name="currentSession">current session instance</param>
            <param name="transaction">transaction instance</param>
            <param name="freeDBLibraries">this parameter is no use for DSI</param>
            <returns>1 success and 0 failure</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.Stop(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.PBTransaction)">
            <summary>
            This function disconnect to database
            </summary>
            <param name="currentSession">current session instance</param>
            <param name="transaction">transaction instance</param>
            <returns>1 success and 0 failure</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.Select(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.IPBValue[],Sybase.PowerBuilder.IPBValue[],Sybase.PowerBuilder.PBDataType[],Sybase.PowerBuilder.PBTransaction)">
            <summary>
            This function execute SELECT statement.
            </summary>
            <param name="currentSession">current session instance</param>
            <param name="statement">select syntax</param>
            <param name="inputValues">select input value array</param>
            <param name="outputValues">select return value array</param>
            <param name="outValueTypes">select return value type array</param>
            <param name="transaction">transaction instance</param>
            <returns>1 success and 0 failure</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.SelectBlob(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.IPBValue[],Sybase.PowerBuilder.IPBValue[],Sybase.PowerBuilder.PBTransaction)">
            <summary>
            retrieve blob data
            </summary>
            <param name="currentSession">current session</param>
            <param name="statement">sql statement</param>
            <param name="inputValues">input value</param>
            <param name="outputValues">out put value</param>
            <param name="transaction">current transaction</param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.UpdateBlob(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.IPBValue[],Sybase.PowerBuilder.IPBValue,Sybase.PowerBuilder.PBTransaction)">
            <summary>
            update blob function
            </summary>
            <param name="currentSession">current session</param>
            <param name="statement">current sql statement</param>
            <param name="inputValues">input variable</param>
            <param name="blobValue">blob data will be set</param>
            <param name="transaction">current transaction</param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.ExecuteNonSelect(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.IPBValue[],Sybase.PowerBuilder.PBTransaction,System.Int32)">
            <summary>
            execute update,delete ,insert sql statement
            </summary>
            <param name="currentSession">current session</param>
            <param name="statement">current statement</param>
            <param name="inputValues">input parameters</param>
            <param name="transaction">current transaction</param>
            <param name="sqlfunc">sql function type</param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.Update(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.IPBValue[],Sybase.PowerBuilder.PBTransaction)">
            <summary>
            update specified column
            </summary>
            <param name="currentSession">current session</param>
            <param name="statement">current statement</param>
            <param name="inputValues">input values</param>
            <param name="transaction">current transaction</param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.Delete(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.IPBValue[],Sybase.PowerBuilder.PBTransaction)">
            <summary>
            delete function
            </summary>
            <param name="currentSession">current session</param>
            <param name="statement">sql statement</param>
            <param name="inputValues">input parameters</param>
            <param name="transaction">current transaction</param>
            <returns>1 success,0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.Insert(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.IPBValue[],Sybase.PowerBuilder.PBTransaction)">
            <summary>
            insert sql function
            </summary>
            <param name="currentSession">current session</param>
            <param name="statement">insert sql statement</param>
            <param name="inputValues">input values</param>
            <param name="transaction">current transaction</param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.ExecuteNonSelectWithCursor(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.IPBValue[],Sybase.PowerBuilder.PBPowerObject,Sybase.PowerBuilder.DB.DBStatement,System.Int32)">
            <summary>
            execute update , delete with cursor
            </summary>
            <param name="currentSession">current session</param>
            <param name="statement">none select sql statement</param>
            <param name="inputValues">input values</param>
            <param name="targetObject">target object</param>
            <param name="cursorStatement">curson statement</param>
            <param name="sqlfunc">sql function type</param>        
            <returns>1 sucess, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.Update(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBCursor,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.IPBValue[])">
            <summary>
            update with cursor
            </summary>
            <param name="currentSession">currrent session</param>
            <param name="cursor">cursor variable</param>
            <param name="statement">statement variable</param>
            <param name="inputValues">input values</param>
            <returns>1 success, 0 fail.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.Delete(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBCursor,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.IPBValue[])">
            <summary>
            delete with cursor
            </summary>
            <param name="currentSession">current session</param>
            <param name="cursor">current cursor</param>
            <param name="statement">current statement</param>
            <param name="inputValues">input parameters</param>
            <returns>1 sucess, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.Prepare(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.PBDynamicStagingArea,System.String,Sybase.PowerBuilder.PBTransaction)">
            <summary>
            Prepare function
            </summary>
            <param name="currentSession">current session</param>
            <param name="sqlsa">sqlsa variable</param>
            <param name="syntax">sql syntax</param>
            <param name="transaction">current transaction</param>
            <returns>1 succes, 0 fail.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.Open(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBCursor)">
            <summary>
            open cursor function
            </summary>
            <param name="currentSession">current session</param>
            <param name="cursor">cursor variable</param>
            <returns>1 success, 0 fail.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.Open(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.IPBValue[],Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.PBTransaction)">
            <summary>
            open cursor function
            </summary>
            <param name="currentSession">current session</param>
            <param name="inputValues">input values</param>
            <param name="cursorStatement">cursor statement</param>
            <param name="transaction">current transaction</param>
            <returns>1 success, 0 fail.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.OpenDynamically3(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBCursor,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.IPBValue[])">
            <summary>
            dynamically open function
            </summary>
            <param name="currentSession">current session</param>
            <param name="cursor">cursor function</param>
            <param name="openStatement">open statement</param>
            <param name="inputValues">input values</param>
            <returns>1 sucess, 0 fail.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.OpenDynamically4(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBCursor,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.PBDynamicDescriptionArea)">
            <summary>
            dynamically open function
            </summary>
            <param name="currentSession">current session</param>
            <param name="cursor">cursor variable</param>
            <param name="openStatement">open statement</param>
            <param name="sqlda">sqlda variable</param>
            <returns>1 sucess, 0 fail.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.Rollback(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.PBTransaction)">
            <summary>
            Rollback function
            </summary>
            <param name="currentSession">current session</param>
            <param name="transaction">current transaction</param>
            <returns>1 success, 0 fail.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.Commit(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.PBTransaction)">
            <summary>
            commit function
            </summary>
            <param name="currentSession">current session</param>
            <param name="transaction">current transaction</param>
            <returns>1 success, 0 fail.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.Close(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBDeclaration)">
            <summary>
            Close function
            </summary>
            <param name="currentSession">current session</param>
            <param name="databaseVar">transaction or sqlsa variable</param>
            <returns>1 success, 0 fail.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.Fetch(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBDeclaration,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.PBDataType[],Sybase.PowerBuilder.IPBValue[])">
            <summary>
            Fetch function.
            </summary>
            <param name="currentSession">current transaction</param>
            <param name="databaseVar">db variable</param>
            <param name="fetchStatement">fetch statement</param>
            <param name="outValueTypes">output value types</param>
            <param name="outputValues">output values</param>
            <returns>1 success, 0 fail.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.Fetch(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBDeclaration,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.PBDynamicDescriptionArea)">
            <summary>
            Fetch function
            </summary>
            <param name="currentSession">current session</param>
            <param name="databaseVar">db variable</param>
            <param name="fetchStatement">fetch statement</param> 
            <param name="sqlda">sqlda variable</param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.Describe(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.PBDynamicStagingArea,Sybase.PowerBuilder.PBDynamicDescriptionArea)">
            <summary>
            Describe function
            </summary>
            <param name="currentSession">current session</param>
            <param name="sqlsa">sqlsa variable</param>
            <param name="sqlda">sqlda variable</param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.RpcFuncCall(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.IPBValue[],Sybase.PowerBuilder.PBObProtoArg[],Sybase.PowerBuilder.PBObReturnArg,Sybase.PowerBuilder.PBTransaction)">
            <summary>
            RpcFuncCall function
            </summary>
            <param name="currentSession">current session</param>
            <param name="statement">statement variable</param>
            <param name="inputValues">input values</param>
            <param name="formalArglist">formal argument list</param>
            <param name="returnArg">return argument</param>
            <param name="transaction">current transaction</param>
            <returns>1 success, 0 fail.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.Execute(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBProc)">
            <summary>
            Execute function.
            </summary>
            <param name="currentSession">current session</param>
            <param name="proc">store procedure</param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.ExecuteDynamically1(Sybase.PowerBuilder.PBSessionBase,System.String,Sybase.PowerBuilder.PBTransaction)">
            <summary>
            Dynamically Execute function
            </summary>
            <param name="currentSession">current session</param>
            <param name="syntax">sql syntax</param>
            <param name="transaction">current transaction</param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.ExecuteDynamically2(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.IPBValue[],Sybase.PowerBuilder.PBDynamicStagingArea)">
            <summary>
            Dynamiclly Execute function.
            </summary>
            <param name="currentSession">current session</param>
            <param name="statement">statement variable</param>
            <param name="inputValues">input values</param>
            <param name="sqlsa">sqlsa variable</param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.ExecuteDynamically3(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBProc,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.IPBValue[])">
            <summary>
            Dynamiclly execute function.
            </summary>
            <param name="currentSession">current session</param>
            <param name="proc">store procedure</param>
            <param name="executeStatement">execute statement</param>
            <param name="inputVaules">input values</param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFunc.ExecuteDynamically4(Sybase.PowerBuilder.PBSessionBase,Sybase.PowerBuilder.DB.DBProc,Sybase.PowerBuilder.DB.DBStatement,Sybase.PowerBuilder.PBDynamicDescriptionArea)">
            <summary>
            Dynamiclly execute function.
            </summary>
            <param name="currentSession">current session</param>
            <param name="proc">store procedure</param>
            <param name="executeStatement">execute statement</param>
            <param name="sqlda">sqlda variable</param>
            <returns>1 success, 0 fail</returns>
        </member>
        <member name="T:Sybase.PowerBuilder.PBFunction_Object">
            <summary>
            This class is the base class for PB function object. It has no members.
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.PBSystemAssembly">
            <summary>
            The PBSystemAssembly class is for representing an assembly of 
            PowerBuilder system library for .NET.
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.PBSessionBase">
            <summary>
            PBSessionBase class
            PBSessionBase represents a PowerBuilder session, which is the environment 
            where a PowerBuilder application runs. A PBSession object holds an instance of 
            the Application class.
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.PBSessionBase._rtthis">
            <summary>
            Pointer to the unmanaged RTThis struct.
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.PBSessionBase._methodQueue">
            <summary>
            For holding posted method invocations.
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.CreateInstance(Sybase.PowerBuilder.PBPowerObject,System.Type,System.Boolean,System.Boolean,System.Object[])">
            Parameter: is4ApplicationInit is used to create application when system start up, 
            it should be false for others
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.CreateInstance``1(System.String,System.Type,``0@)">
            <summary>
            Create an instance of the type that is a sub type of superType and whose name
            is the given name.
            </summary>
            <param name="name">The name of the type</param>
            <param name="superType">The super type</param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.CreateInstance``1(Sybase.PowerBuilder.PBPowerObject,System.String,System.Type,``0@)">
            <summary>
            Create an instance of the type whose name is the give name and which is the 
            sub-class of the given superType.
            </summary>
            <param name="parent">The parent of the new object</param>
            <param name="name">The name of the type</param>
            <param name="superType">The super type of the type to be found</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.CreateInstance``1(System.String,System.Type,System.Boolean,``0@)">
            <summary>
            Create an instance of the type that is a sub type of superType and whose name
            is the given name.
            </summary>
            <param name="name">The name of the type</param>
            <param name="superType">The super type</param>
            <param name="init">The flag indicating whether to initialize of the object.</param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.CreateInstance``1(Sybase.PowerBuilder.PBPowerObject,System.String,System.Type,System.Boolean,``0@)">
            <summary>
            Create an instance of the type whose name is the give name and which is the 
            sub-class of the given superType.
            </summary>
            <param name="parent">The parent of the new object</param>
            <param name="name">The name of the type</param>
            <param name="superType">The super type of the type to be found</param>
            <param name="init">The flag indicating whether to initialize the object.</param>
            <returns>The new object.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.CreateInstance``1(System.Type,``0@)">
            <summary>
            Create an instance of the given type.
            </summary>
            <param name="type">The type of the new instance.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.CreateInstance``1(Sybase.PowerBuilder.PBPowerObject,System.Type,``0@)">
            <summary>
            Create an instance of the given type.
            </summary>
            <param name="parent">The parent of the new instance.</param>
            <param name="type">The type of the new instance.</param>
            <returns>The new instance</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.CreateInstance``1(System.String,``0@)">
            <summary>
            Create an instance of the type that has the given type name.
            </summary>
            <param name="typeName">The type name</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.CreateInstance``1(Sybase.PowerBuilder.PBPowerObject,System.String,``0@)">
            <summary>
            Create an instance of the type that has the given type name.
            </summary>
            <param name="parent">The parent of the new instance.</param>
            <param name="typeName">The type name</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.CreateInstance``1(System.Type,System.Boolean,``0@)">
            <summary>
            Create an instance of the given type.
            </summary>
            <param name="type">The type of the new instance.</param>
            <param name="init">The flag indicating whether to initialize the object.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.CreateInstance``1(Sybase.PowerBuilder.PBPowerObject,System.Type,System.Boolean,``0@)">
            <summary>
            Create an instance of the given type.
            </summary>
            <param name="parent">The parent of the new instance.</param>
            <param name="type">The type of the new instance.</param>
            <param name="init">The flag indicating whether to initialize the object.</param>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.CreateInstance``1(System.Type,System.String,``0@)">
            <summary>
            Create an instance of the type which is the nested type of the given type
            and whose name is the given type name.
            </summary>
            <param name="outerType">The outer type</param>
            <param name="typeName">The type name</param>
            <returns>The new instance</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.CreateInstance``1(Sybase.PowerBuilder.PBPowerObject,System.Type,System.String,``0@)">
            <summary>
            Create an instance of the type which is the nested type of the given type
            and whose name is the given type name.
            </summary>
            <param name="parent">The parent of the new instance.</param>
            <param name="outerType">The outer type</param>
            <param name="typeName">The type name</param>
            <returns>The new instance</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.FindType(System.String)">
            <summary>
            Find the type whose name is represented by typeName in PowerBuilder.
            </summary>
            <param name="typeName">The name of the type</param>
            <returns>The type whose name is typeName in PowerBuilder.</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.InitializeObject(System.Object)">
            <summary>
            Initialize the object.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.InitializeObject(Sybase.PowerBuilder.PBPowerObject,System.Object)">
            <summary>
            Initialize the object, including triggering the create and constructor events.
            </summary>
            <param name="parent">The parent of the object to be initialized</param>
            <param name="obj">The object to be initialized.</param>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.CreateObject(System.Object)">
            <summary>
            Trigger the create event.
            </summary>
            <param name="obj">The object to be initialized.</param>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.ConstructObject(System.Object)">
            <summary>
            Trigger the constructor event.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.GetClassName(System.Object)">
            <summary>
            Return the class name of the given object.
            </summary>
            <param name="obj">The obj parameter must not be null.</param>
            <returns></returns>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.PostMethod(System.Object,System.String,Sybase.PowerBuilder.PBArgument[])">
            <summary>
            Post the request to the method queue.
            </summary>
            <param name="queue"></param>
            <param name="obj"></param>
            <param name="methodName"></param>
            <param name="args"></param>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.PostMethod(System.Type,System.String,Sybase.PowerBuilder.PBArgument[])">
            <summary>
            Post the request to the method queue.
            </summary>
            <param name="queue"></param>
            <param name="type"></param>
            <param name="methodName"></param>
            <param name="args"></param>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.DynamicPostMethod(System.Object,System.String,Sybase.PowerBuilder.PBArgument[])">
            <summary>
            Post the request to the method queue dynamically.
            </summary>
            <param name="queue"></param>
            <param name="obj"></param>
            <param name="methodName"></param>
            <param name="args"></param>
        </member>
        <member name="M:Sybase.PowerBuilder.PBSessionBase.GetDescendantType(System.String,System.Type)">
            <summary>
            Get the Type that is a descendant type of the given type and whose name 
            is the given name.
            </summary>
            <param name="name">The name of the type</param>
            <param name="type">The super type</param>
            <returns></returns>
        </member>
        <member name="P:Sybase.PowerBuilder.PBSessionBase.Message">
            <summary>
            Represents the PowerBuilder Message object.
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.PBSessionBase.Error">
            <summary>
            Represents the PowerBuilder Error object.
            </summary>
        </member>
        <member name="P:Sybase.PowerBuilder.PBSessionBase.IsRunningOnWeb">
            <summary>
            
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.LibraryManager.SystemFunctions.LibraryHelper">
            <summary>
            this class wrap library manager functions
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.LibraryManager.SystemFunctions.LibraryHelper.LibraryCreate(System.String,System.String)">
            <summary>
            Create an empty library and directory (if not already present).
            Assuming you call this with the libraryName being "C:\foo\bar\wombat.PBL" this will create:
            	a) the directory:  C:\foo\bar\wombat.PBL
            	b) the project file: wombat.PBL_proj
            </summary>
            <param name="libraryName">Library name, which actually becomes a directory name with the empty project file within it.</param>
            <param name="comment">Optional comment for the entire library.</param>
            <returns>LMI_OK (0) if successful, otherwise error values (all negative?)</returns>
            <remarks>This is more oriented to throw exceptions than returing error values.</remarks>
        </member>
        <member name="M:Sybase.PowerBuilder.LibraryManager.SystemFunctions.LibraryHelper.LibraryDelete(System.String,System.Boolean)">
            <summary>
             Delete the library.  If the flag 'deleteEverything' is true, then delete all
             those individual files too.  This is rather draconian so it's under caller control.
             If this flag is false, then just delete the PBL project file.
            </summary>
            <param name="libraryName">Library name which actually becomes a directory name with the project file within it.</param>
            <param name="deleteEverything">If true will delete all the entry files and the directory itself.</param>
            <returns>LMI_OK (0) if successful, otherwise error values (all negative?)</returns>
            <remarks>This is more oriented to throw exceptions than returing error values.</remarks>
            <remarks>If 'deleteEverything' is set, this will delete ALL files in the library directory, 
            even any ancillary files not properly part of the PBL.</remarks>
        </member>
        <member name="M:Sybase.PowerBuilder.LibraryManager.SystemFunctions.LibraryHelper.LibraryDelete(System.String,System.String,Sybase.PowerBuilder.PBLibImportType)">
            <summary>
            Delete a specific entry in the library.
            This will delete both the specific file (the object) and the reference in the project file.
            </summary>
            <param name="libraryName">Library name which actually becomes a directory name with the project file within it.</param>
            <param name="objectName">The name of the specific entry to delete, like "d_foobar"</param>
            <param name="objectType">The object type (like DataWindow)</param>
            <returns>LMI_OK (0) if successful, otherwise error values </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.LibraryManager.SystemFunctions.LibraryHelper.LibraryDirectory(System.String,Sybase.PowerBuilder.PBLibDirTypeValue)">
            <summary>
            Return the contents of this directory as a single huge string.
            </summary>
            <param name="libraryName">Library name, which actually becomes a directory name with the empty project file within it.</param>
            <param name="objectType">The standard object type</param>
            <returns>
            A single string which is a tab-separated list with one object per line. 
            The format of the list is:
            	name ~t date/time modified ~t comments ~t   type~n
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.LibraryManager.SystemFunctions.LibraryHelper.LibraryDirectoryEx(System.String,Sybase.PowerBuilder.PBLibDirTypeValue)">
            <summary>
            Return the contents of this directory as a single huge string.
            </summary>
            <param name="libraryName">Library name, which actually becomes a directory name with the empty project file within it.</param>
            <param name="objectType">The standard object type</param>
            <returns>
            A single string which is a tab-separated list with one object per line. 
            The format of the list is:
            	name ~t date/time modified ~t comments ~t   type~n
            </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.LibraryManager.SystemFunctions.LibraryHelper.GetLibraryList(System.Boolean)">
            <summary>
            get library list
            </summary>
            <param name="ideMode">indicate the current calling from ide or runtime</param>
            <returns>library list</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.LibraryManager.SystemFunctions.LibraryHelper.SetLibraryList(System.String)">
            <summary>
            set library list
            </summary>
            <param name="newFileList">library list string</param>
            <returns>LMI_OK (0) if successful, otherwise error values </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.LibraryManager.SystemFunctions.LibraryHelper.AddToLibraryList(System.String)">
            <summary>
            add a library to library list
            </summary>
            <param name="fileListToAdd">the library will be added</param>
            <returns>LMI_OK (0) if successful, otherwise error values </returns>
        </member>
        <member name="M:Sybase.PowerBuilder.LibraryManager.SystemFunctions.LibraryHelper.LibraryExport(System.String,System.String,Sybase.PowerBuilder.PBLibExportType)">
            <summary>
            Export the library entry into a string and return to the caller.
            </summary>
            <param name="libraryName">Library name, which actually becomes a directory name with the empty project file within it.</param>
            <param name="objectName">Object name, like 'w_main'</param>
            <param name="objectType">The standard object type like 'Window'</param>
            <returns>The source as a single string</returns>
        </member>
        <member name="M:Sybase.PowerBuilder.LibraryManager.SystemFunctions.LibraryHelper.LibraryImport(System.String,System.String,Sybase.PowerBuilder.PBLibImportType,System.String,System.String,System.String@)">
            <summary>
            Import this string into the managed library system.
            </summary>
            <param name="libraryName">Library name, which actually becomes a directory name with the empty project file within it.</param>
            <param name="objectName">Object name, like 'w_main'</param>
            <param name="objectType">The standard object type like 'Window'</param>
            <param name="syntax">The object body</param>
            <param name="comment">Any comment to attach to this object</param>
            <param name="errors">Any errors from the build process (if any)</param>
            <returns>LMI_OK (0) if successful, otherwise error values </returns>
        </member>
        <member name="T:Sybase.PowerBuilder.PBFileHelper">
            <summary>
            Manage File Handles
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.PBFileHelper.GetIcon(System.String)">
            This function should not be called. 
            Call GetIcon(String fileName, out bool fromHandle) instead.
        </member>
        <member name="T:Sybase.PowerBuilder.IDataWindowOp">
            <summary>
            Summary description for IDataWindowOp.
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFUNCTYPE">
            <summary>
            define sql function type
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFUNCTYPE.SQLDBDELETE">
            <summary>
            delete function
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFUNCTYPE.SQLDBINSERT">
            <summary>
            insert function
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFUNCTYPE.SQLDBOTHERS">
            <summary>
            other sql commands
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFUNCTYPE.SQLDBPROCEDURE">
            <summary>
            procedure command
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFUNCTYPE.SQLDBRPC">
            <summary>
            rpc command
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFUNCTYPE.SQLDBSELECT">
            <summary>
            select command
            </summary>
        </member>
        <member name="F:Sybase.PowerBuilder.DSI.PBSQL.DSISQLFUNCTYPE.SQLDBUPDATE">
            <summary>
            update command
            </summary>
        </member>
        <member name="T:Sybase.PowerBuilder.DSI.PBSQL.TransactionEventSink">
            <summary>
            Transaction event sink class
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.TransactionEventSink.#ctor">
            <summary>
            TransactionEventSink constructor
            </summary>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.TransactionEventSink.HookEvents(Sybase.PowerBuilder.PBTransaction)">
            <summary>
            hook envents function
            </summary>
            <param name="transaction">current transaction</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.TransactionEventSink.UnHookEvents(Sybase.PowerBuilder.PBTransaction)">
            <summary>
            UnHookEvents funcitons
            </summary>
            <param name="transaction">current transaction</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.TransactionEventSink.OnAutoCommitChanged(System.Object,Sybase.PowerBuilder.TransactionEventArgs)">
            <summary>
            auto commit changed callback function
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event data</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.TransactionEventSink.OnDBParmChanged(System.Object,Sybase.PowerBuilder.TransactionEventArgs)">
            <summary>
            database parameter changed callback
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event data</param>
        </member>
        <member name="M:Sybase.PowerBuilder.DSI.PBSQL.TransactionEventSink.OnGetDBPHandle(System.Object,Sybase.PowerBuilder.TransactionEventArgs)">
            <summary>
            get database handle
            </summary>
            <param name="sender">event sender</param>
            <param name="e">event data</param>
        </member>
    </members>
</doc>
